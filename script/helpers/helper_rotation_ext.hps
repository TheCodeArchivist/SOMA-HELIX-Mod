#include "helpers/helper_rotation.hps"

/**
 * Faces the rotation of an entity to another target entity.
 * 
 * @param asEntityName, The name of the entity you want to face to.
 * @param asTargetName, The name of the target the entity will be faced to.
 * @param abUseXZ, if the rotation should also be applied to the X and Z plane.
 **/
void Entity_FaceToEntity(const tString &in asEntityName, const tString&in asTargetName, bool abUseXZ = false)
{
	cVector3f vRotatedEntity = cVector3f(0);
	cVector3f vTargetPos = cVector3f(0);
	cQuaternion qQuat;
	
	iLuxEntity@ pRotatedEntity = cLux_GetCurrentMap().GetEntityByName(asEntityName, eLuxEntityType_LastEnum, "");
	iLuxEntity@ pTargetEntity = cLux_GetCurrentMap().GetEntityByName(asTargetName, eLuxEntityType_LastEnum, "");
	
	if(pRotatedEntity is null && pTargetEntity is null) return;
	   
	vTargetPos = pTargetEntity.GetPosition();
	vRotatedEntity = pRotatedEntity.GetPosition();
	
	cVector3f fAngle = cMath_GetAngleFromPoints3D(vRotatedEntity, vTargetPos);
	
	//For some reason the Y is negtavie so fixing that in a hacky way
	fAngle.y -= cMath_ToRad(180);
	
	//To make sure the current rotation of the entity won't fuck up the final rotation
	cVector3f vCurrentRot = Entity_GetRotationEuler(asEntityName);
	vCurrentRot.Normalize();
	qQuat.FromAngleAxis(0, vCurrentRot);
	
	Entity_SetRotation(asEntityName, qQuat);
	
	//Do the rotation
	if(abUseXZ) Entity_SetRotationEuler(asEntityName, cVector3f(fAngle.x, fAngle.y - cMath_ToRad(180), fAngle.z));
		
	else
	{
		cVector3f vPos = Entity_GetRotationEuler(asEntityName);
		Entity_SetRotationEuler(asEntityName, cVector3f(vPos.x, fAngle.y, vPos.z));
	}
}
