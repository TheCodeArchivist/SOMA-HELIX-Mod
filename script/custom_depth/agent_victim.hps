#include "agents/Agent_Humanoid.hps"

#include "helper/helper_effects.hps"
#include "custom_depth/helper_custom_depth.hps"

/////////////////////////////////////////
// SETTINGS
/////////////////////////////////////////

//------------------------------------------------------------

const tString gsVictimAmbientMusicAkers = "NPC_generic_darkencounter5";
const float gfVictimAmbientMusicAkersVolume = 0.45f;

const tString gsVictimAlertMusicAkers = "NPC_generic_darkencounter1";
const float gfVictimAlertMusicAkersVolume = 0.525f;

// Ambient
const tString gsVictimAmbientMusic = "NPC_leviathan_stalk";
const float gfVictimAmbientMusicVolume = 0.95f;

// Stright to Ambient
const tString gsVictimStrightToAmbientMusic = "NPC_coralpuppet_str_amb";
const float gfVictimStrightToAmbientMusicVolume = 0.45f;

// Ambient to Hunt
const tString gsVictimAmbientToHuntMusic = "NPC_coralpuppet_amb_att";
const float gfVictimAmbientToHuntVolume = 0.45f;

// Ambient to Alert
const tString gsVictimAmbientToAlertMusic = "NPC_coralpuppet_amb_att";
const float gfVictimAmbientToAlertVolume = 0.45f;

// Alert
const tString gsVictimAlertMusic = "NPC_adultflesher_stalk";
const float gfVictimAlertMusicVolume = 0.95f;

// Alert to Ambient
const tString gsVictimAlertToAmbientMusic = "NPC_CoralPuppet_Stalk";
const float gfVictimAlertToAmbientMusicVolume = 0.525f;

// Alert to Hunt
const tString gsVictimAlertToHuntMusic = "NPC_CoralPuppet_Stalk";
const float gfVictimAlertToHuntMusicVolume = 0.525f;

// Hunt
const tString gsVictimHuntMusic = "NPC_CoralPuppet_Attack";
const float gfVictimHuntMusicVolume = 0.75f;

// Hunt to Ambient
const tString gsVictimHuntToAmbientMusic = "NPC_coralpuppet_att_amb";
const float gfVictimHuntToAmbientMusicVolume = 0.75f;

// Hunt to Alert
const tString gsVictimHuntToAlertMusic = "NPC_coralpuppet_att_stalk";
const float gfVictimHuntToAlertMusicVolume = 0.75f;

//-------------------------------------------------------

enum eVictimState
{
	eVictimState_Idle,
	eVictimState_AfterKnockDown,
	eVictimState_HideAndWait,
	eVictimState_Patrol,
	eVictimState_Wander,
	eVictimState_Investigate,
	eVictimState_PostInvestigate,
	eVictimState_Search,
	eVictimState_Hunt,
	eVictimState_AfterHunt,
	eVictimState_HuntPause,
	eVictimState_OpenDoor,
	eVictimState_Retreat,
	eVictimState_LiftPlayer,
	eVictimState_AvoidPlayer
};

enum eVictimSpeed
{
	eVictimSpeed_SlowWalk,
	eVictimSpeed_Walk,
	eVictimSpeed_FastWalk,
	eVictimSpeed_SlowRun,
	eVictimSpeed_Run,
}

enum eVictimBark
{
	eVictimBark_Silent,
	eVictimBark_Idle,
	eVictimBark_Search,
	eVictimBark_Hunt,
}

//------------------------------------------------------------
	
class cScrAgentVictim : cScrAgentHumanoid
{
	//{BARKS
	//NOTE Need to put em in the class in order for the proper strings to be saved. Sorta hackish but works
	

	tString gsVictim_RandomEvent_BarkSound;
	tString gsVictim_RandomEvent_WalkStepSound;

	tString gsVictimIdleSound;
	cVector2f gfVictimIdleSoundMinMax;

	tString gsVictimSearchSound;
	cVector2f gfVictimSearchSoundMinMax;

	tString gsVictimHuntSound;
	cVector2f gfVictimHuntSoundMinMax;

	tString gsVictimSound_InvestigateStart;
	tString gsVictimSound_InvestigateExtraSound;
	tString gsVictimSound_SearchStart;
	tString gsVictimSound_SearchExtraSound;
	tString gsVictimSound_LosePlayer;
	tString gsVictimSound_SpotPlayer;

	//}ENDBARKS

	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
		mBaseObj.SetUpdatePlayerDetection(true);
		mBaseObj.SetCheckForDoors(true);
		mBaseObj.SetMaxCheckDoorDistance(0.65f);
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// LOADING
	//{//////////////////////////////////////
	
	//------------------------------------------------------------
	
	void SetupCharBody()
	{
		cScrAgentHumanoid::SetupCharBody();
		
		iCharacterBody@ pCharBody = mBaseObj.GetCharBody();
		
		pCharBody.SetMass(80);
		pCharBody.SetMaxPositiveMoveSpeed(eCharDir_Forward,1.0f);
		pCharBody.SetMoveAcc(eCharDir_Forward,4);
		pCharBody.SetMoveDeacc(eCharDir_Forward,8);
		pCharBody.SetAccurateClimbing(true);
		pCharBody.SetMaxPushMass(20);
		pCharBody.SetMaxPushForce(300);
	}
	
	//------------------------------------------------------------
	
	void SetupAfterLoad(cWorld @apWorld, cResourceVarsObject@ apVars, cResourceVarsObject@ apInstanceVars)
	{
		cScrAgentHumanoid::SetupAfterLoad(apWorld, apVars, apInstanceVars);

		///////////////////////////////
		//Akers vs Victim setup
		mbIsAkers = apVars.GetVarBool("IsAkers", false);

		if(mbIsAkers)
		{
			gsVictim_RandomEvent_BarkSound = "NPC_Creatures/Foley/InWorld/CoralPuppet_01/distant_events/movement";
			gsVictim_RandomEvent_WalkStepSound = "NPC_Creatures/Foley/InWorld/CoralPuppet_01/walk_step";
			
			gsVictimIdleSound = "NPC_Creatures/Vocalisations/InWorld/Puppet/idle";
			gfVictimIdleSoundMinMax = cVector2f(4, 8);
			gsVictimSearchSound = "NPC_Creatures/Vocalisations/InWorld/Puppet/search";
			gfVictimSearchSoundMinMax = cVector2f(3, 7);
			gsVictimHuntSound = "NPC_Creatures/Vocalisations/InWorld/Puppet/hunt";
			gfVictimHuntSoundMinMax = cVector2f(2, 4);

			gsVictimSound_InvestigateStart="NPC_Creatures/Vocalisations/InWorld/Puppet/investigate_start";
			gsVictimSound_InvestigateExtraSound="NPC_Creatures/Vocalisations/InWorld/Puppet/investigate_start_extra";
			gsVictimSound_SearchStart="NPC_Creatures/Vocalisations/InWorld/Puppet/search_start";
			gsVictimSound_SearchExtraSound="NPC_Creatures/Vocalisations/InWorld/Puppet/search_extra";
			gsVictimSound_LosePlayer="NPC_Creatures/Vocalisations/InWorld/Puppet/lose";
			gsVictimSound_SpotPlayer="NPC_Creatures/Vocalisations/InWorld/Puppet/alert";
		}
		else
		{
			gsVictim_RandomEvent_BarkSound = "NPC_Creatures/Foley/InWorld/CoralPuppet_01/distant_events/movement";
			gsVictim_RandomEvent_WalkStepSound = "";
			
			gsVictimIdleSound = "NPC_Creatures/Vocalisations/InWorld/Puppet/idle";
			gfVictimIdleSoundMinMax = cVector2f(4, 8);
			gsVictimSearchSound = "NPC_Creatures/Vocalisations/InWorld/Puppet/search";
			gfVictimSearchSoundMinMax = cVector2f(3, 7);
			gsVictimHuntSound = "NPC_Creatures/Vocalisations/InWorld/Puppet/hunt";
			gfVictimHuntSoundMinMax = cVector2f(2, 4);

			gsVictimSound_InvestigateStart="NPC_Creatures/Vocalisations/InWorld/Puppet/investigate_start";
			gsVictimSound_InvestigateExtraSound="NPC_Creatures/Vocalisations/InWorld/Puppet/investigate_start_extra";
			gsVictimSound_SearchStart="NPC_Creatures/Vocalisations/InWorld/Puppet/search_start";
			gsVictimSound_SearchExtraSound="NPC_Creatures/Vocalisations/InWorld/Puppet/search_extra";
			gsVictimSound_LosePlayer="NPC_Creatures/Vocalisations/InWorld/Puppet/lose";
			gsVictimSound_SpotPlayer="NPC_Creatures/Vocalisations/InWorld/Puppet/alert";
		}
		
		///////////////////////////////
		//State
		mbFastNonLookKill = apInstanceVars.GetVarBool("FastNonLookKill", true);
		mbAttackFatal = apInstanceVars.GetVarBool("AttackFatal", true);
		mbAttackInstantKnockDown = apInstanceVars.GetVarBool("AttackInstantKnockDown", true);
		mfAgressionAmount = apInstanceVars.GetVarFloat("AgressionAmount", 0);
		
		///////////////////////////////
		//General
		mBaseObj.SetAlignEntityWithGroundRay(true);
		mBaseObj.SetAlignEntityWithGroundRelativeRayStart(-0.0f);
		mBaseObj.SetAlignEntityWithGroundMaxRayDistance(1.0f);
		mBaseObj.SetFOV(cMath_ToRad(360));
		mBaseObj.SetSightRange(15.0f);
		mBaseObj.SetSightRangeAffectedByModifiers(false);
		
		///////////////////////////////
		//Talk
		msTalk_WanderSubject = apInstanceVars.GetVarString("Talk_WanderSubject", "");
		msTalk_HideAndWaitSubject = apInstanceVars.GetVarString("Talk_HideAndWaitSubject", "");
		
		///////////////////////////////
		//Listener
		@mpSoundListener = cLux_CreateEntityComponent_SoundListener(mBaseObj);
		mpSoundListener.LoadFromInstanceVariables(apInstanceVars);
		mpSoundListener.SetHearRadius(1.0f);
		mpSoundListener.SetIgnoreSoundRadius(2.9f);
		mpSoundListener.SetMinHearPrio(-2);
		mpSoundListener.SetSoundRadiusMul(1.5f);
						
		///////////////////////////////
		//Pathfinder setup
		mpPathfinder.SetNodeContainerName("Victim");
		mpPathfinder.SetMaxHeight(0.8f);
		
		///////////////////////////////
		//Mover setup
		mpMover.SetupWallAvoidance(0.8f, 5.0f, 4);
		mpMover.SetupDynamicObjectAvoidance(1.7f, 10, 3);
		
		mpMover.SetMaxForwardSpeed(1);
		mpMover.SetMaxBackwardSpeed(1);
		
		mpMover.SetStoppedToWalkSpeed(0.05f);
		mpMover.SetRunToWalkSpeed(3.0);
		mpMover.SetWalkToRunSpeed(3.2);
		
		/////////////////////////////////
		// Speed States
		float fWalkSpeedMul = apInstanceVars.GetVarFloat("WalkSpeedMul", 1);
		float fRunSpeedMul = apInstanceVars.GetVarFloat("RunSpeedMul", 1);
		
		mpMover.AddSpeedState(eVictimSpeed_SlowWalk);
		mpMover.SetSpeedState_Forward(0.7*fWalkSpeedMul);
		
		mpMover.AddSpeedState(eVictimSpeed_Walk);
		mpMover.SetSpeedState_Forward((mbIsAkers ? 0.9 : 0.8)*fWalkSpeedMul);
		
		mpMover.AddSpeedState(eVictimSpeed_FastWalk);
		mpMover.SetSpeedState_Forward((mbIsAkers ? 2.25f : 2.05f)*fWalkSpeedMul);
		
		mpMover.AddSpeedState(eVictimSpeed_SlowRun);
		mpMover.SetSpeedState_Forward(3.4*fRunSpeedMul);
		if(mbIsAkers==false)
		{
			mpMover.SetSpeedState_TurnMaxSpeed(6);
			mpMover.SetSpeedState_TurnSpeedMul(10);
			mpMover.SetSpeedState_TurnBreakMul(0.2);
		}
		
		mpMover.AddSpeedState(eVictimSpeed_Run);
		mpMover.SetSpeedState_Forward(6.1*fRunSpeedMul);
		mpMover.SetSpeedState_TurnMaxSpeed(6);
		mpMover.SetSpeedState_TurnSpeedMul(10);
		mpMover.SetSpeedState_TurnBreakMul(0.2);
		
		
		/////////////////////////////////
		// States
		@mpStateMachine = cLux_CreateEntityComponent_StateMachine(mBaseObj);
		
		mpStateMachine.AddState("Idle", eVictimState_Idle);
		mpStateMachine.AddState("AfterKnockDown", eVictimState_AfterKnockDown);
		mpStateMachine.AddState("HideAndWait", eVictimState_HideAndWait);
		mpStateMachine.AddState("Patrol", eVictimState_Patrol);
		mpStateMachine.AddState("Wander", eVictimState_Wander);
		mpStateMachine.AddState("Investigate", eVictimState_Investigate);
		mpStateMachine.AddState("PostInvestigate", eVictimState_PostInvestigate);
		mpStateMachine.AddState("Search", eVictimState_Search);
		mpStateMachine.AddState("Hunt", eVictimState_Hunt);
		mpStateMachine.AddState("HuntPause", eVictimState_HuntPause);
		mpStateMachine.AddState("AfterHunt", eVictimState_AfterHunt);
		mpStateMachine.AddState("OpenDoor", eVictimState_OpenDoor);
		mpStateMachine.AddState("Retreat", eVictimState_Retreat);
		mpStateMachine.AddState("LiftPlayer", eVictimState_LiftPlayer);
		mpStateMachine.AddState("AvoidPlayer", eVictimState_AvoidPlayer);		
		
		
		/////////////////////////////////
		// Barks
		@mpBarkMachine = cLux_CreateEntityComponent_BarkMachine(mBaseObj);
		mpBarkMachine.SetupVoice(apInstanceVars.GetVarString("VoiceCharacter",""), true, 0.5, 20, 20);
		
		mpBarkMachine.AddState(eVictimBark_Silent);
		
		mpBarkMachine.AddState(eVictimBark_Idle);
		cVector2f vMinMax = apInstanceVars.GetVarVector2f("IdleMinMaxTime",cVector2f(0,0));
		mpBarkMachine.SetState_VoiceBark(apInstanceVars.GetVarString("IdleSubject",""), vMinMax.x, vMinMax.y, true);
		mpBarkMachine.SetState_SoundBark(gsVictimIdleSound, gfVictimIdleSoundMinMax.x, gfVictimIdleSoundMinMax.y, true);
		
		mpBarkMachine.AddState(eVictimBark_Search);
		vMinMax = apInstanceVars.GetVarVector2f("SearchMinMaxTime",cVector2f(0,0));
		mpBarkMachine.SetState_VoiceBark(apInstanceVars.GetVarString("SearchSubject",""), vMinMax.x, vMinMax.y, true);
		mpBarkMachine.SetState_SoundBark(gsVictimSearchSound, gfVictimSearchSoundMinMax.x, gfVictimSearchSoundMinMax.y, true);
				
		mpBarkMachine.AddState(eVictimBark_Hunt);
		vMinMax = apInstanceVars.GetVarVector2f("HuntMinMaxTime",cVector2f(0,0));
		mpBarkMachine.SetState_VoiceBark(apInstanceVars.GetVarString("HuntSubject",""), vMinMax.x, vMinMax.y, true);
		mpBarkMachine.SetState_SoundBark(gsVictimHuntSound, gfVictimHuntSoundMinMax.x, gfVictimHuntSoundMinMax.y, true);
		
		if (mBaseObj.GetName() == "EndChaseVictim")
		{
			mbIsEndChaseVictim = true;
		}		
		if (cLux_GetExplorationModeActive())
		{			
			if (mBaseObj.GetName() == "Victim_tunnel")
			{
				mbExplorationMode_IsTunnelVictim = true;
			}
			mBaseObj.SetVarBool("ExplorationMode_DontWanderOff", false);
			
			if (mbIsAkers == true && mbExplorationMode_IsTunnelVictim == false && mbIsEndChaseVictim == false)
			{
				mBaseObj.SetVarBool("ExplorationMode_InHideZone", false);
				mBaseObj.SetVarBool("ExplorationMode_PlayerInHideZone", false);
				
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_208");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_214");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_216");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_1");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_323");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_284");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_296");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_454");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_337");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_347");
				mvExplorationMode_AvoidNodes.push_back("PathNodeArea_341");
			}
			
			if (mbIsEndChaseVictim == false && mbExplorationMode_IsTunnelVictim == false && mbIsAkers == false)
			{
				mBaseObj.Timer_Add("DecreaseAgitationTimer", cMath_RandRectf(7.f, 11.f), "Timer_DecreaseAgitation", true, true);
			}
		}
	}
	
	//------------------------------------------------------------
	
	void OnAfterWorldLoad()
	{
		cScrAgentHumanoid::OnAfterWorldLoad();
		
		//CoralInfectionHandler_AddEntity(mBaseObj.GetID());
	}
	
	//------------------------------------------------------------
	
	//} END LOADING
	
	/////////////////////////////////////////
	// GENERAL
	//{//////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnUpdate(float afTimeStep)
	{
		cScrAgentHumanoid::OnUpdate(afTimeStep);
		
		int lState = mpStateMachine.GetCurrentState();
		
		/////////////////////////
		// Talk
		if(lState == eVictimState_Wander || lState == eVictimState_HideAndWait)
		{
			if(msTalk_WanderSubject != "" && msTalk_HideAndWaitSubject != "")
			{	
				mfTalkCount -= afTimeStep*1.0f;
				
				if(mfTalkCount <=0)
				{
					if(lState == eVictimState_Wander)
					{
						if(mBaseObj.GetDistanceToPlayer() >10)
							mpBarkMachine.PlayVoice(msTalk_WanderSubject,1);
						mfTalkCount = cMath_RandRectf(100, 200);
					}
					else
					{
						mpBarkMachine.PlayVoice(msTalk_HideAndWaitSubject,1);
						mfTalkCount = cMath_RandRectf(100, 200);
					}
				}
			}
		}
		
		/////////////////////////
		// Attach player camera
		UpdateAttachPlayerCamera(afTimeStep);
		
		/////////////////////////
		// Music
		UpdateCheckAmbientMusic(afTimeStep);
		
		if(mbAlertMusic_Active==false && mfAlertMusic_FadeCount>0)
		{
			mfAlertMusic_FadeCount-=afTimeStep;
			if(mfAlertMusic_FadeCount<0)
			{
				mbAmbientMusicActive = true;
				if(mbIsAkers)
					Music_AddDynamicTrack(	mBaseObj.GetID(), 0, eMusicPrio_AgentAmb, 
											gsVictimAmbientMusicAkers,gfVictimAmbientMusicAkersVolume, 5,5);	
				else
				{
					int lPrevState = mpStateMachine.GetPrevState();
					
					if(lPrevState == eVictimState_Hunt)
						Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAmbTransition, gsVictimHuntToAmbientMusic, gfVictimHuntToAmbientMusicVolume, 0, 1);
						
					else if(lPrevState == eVictimState_Investigate || lPrevState == eVictimState_Search)
						Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAmbTransition, gsVictimAlertToAmbientMusic, gfVictimAlertToAmbientMusicVolume, 0, 1);
					
					else	
						Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAmbTransition, gsVictimStrightToAmbientMusic, gfVictimStrightToAmbientMusicVolume, 0, 1);
						
					Music_AddDynamicTrack(	mBaseObj.GetID(), 0, eMusicPrio_AgentAmb, 
											gsVictimAmbientMusic,gfVictimAmbientMusicVolume, 5,5);
					
				}
			}
		}
		
		/////////////////////////
		// Scream in progress
		if(mfTimeSinceLastScream<1000)
			mfTimeSinceLastScream+=afTimeStep;
			
			
		///////////////////////////
		// Time since last disappear
		if(mbIsAkers)
		{
			if(mfTimeSinceLastDisappear<10000)
				mfTimeSinceLastDisappear += afTimeStep;
		}
		
		/////////////////////////
		// Check heighented awareness.
		if(	(lState == eVictimState_Patrol || lState == eVictimState_Wander) &&
			(mbIsAkers || (cLux_GetPlayer().GetHealth()>0.35 && AttackMeter_GetTimeSinceLastKnockDown()>180) ) &&
			mbBadHearing==false)
		{
			mfHeightenedAwarenessCount -= afTimeStep;
			
			if(mfHeightenedAwarenessCount<=0)
			{
				if(mbHasHeightenedAwareness || mfNearPlayerCount>45.0f)
				{
					SetDefaultSoundRadiusMul();
					mbHasHeightenedAwareness=false;
					mfHeightenedAwarenessCount=cMath_RandRectf(10, 15);
				}
				else
				{
					float fNewAmount = mbIsAkers ? 2.5f : 1.85f;
					mpSoundListener.SetSoundRadiusMul(fNewAmount);
					mbHasHeightenedAwareness=true;
					mfHeightenedAwarenessCount=cMath_RandRectf(1, 4);
				}
			}
		}
		else
		{
			mfHeightenedAwarenessCount=5;
			mbHasHeightenedAwareness=false;
		}
		
		/////////////////////////
		// Bad Hearing
		if(mbBadHearing)
		{
			mpSoundListener.SetSoundRadiusMul(0.5f);
		}
		
		/////////////////////////
		// Look at distortion
		mfLookAtDistortionCount -= afTimeStep;
		if(lState != eVictimState_HideAndWait && mfLookAtDistortionCount<0.0f)
		{
			mfLookAtDistortionCount = cMath_RandRectf(0.1f, 0.3f);			
			mlLookAtDistortionCount++;
			
			if(mBaseObj.GetEntityIsInPlayerLineOfSight(true))
			{
				float fAmount = 1.0f - cMath_Clamp( (mBaseObj.GetDistanceToPlayer()- 3.0f) / 15.0f, 0.0f, 1.0f);
				
				//Effect_VideoDistortion_Start(0.6f*(fAmount*0.7+0.3f), 0.3f, 0.1f, 0.5f, mbIsAkers ? 1.0f : 0.3f);
				
				if(mbIsAkers && mlLookAtDistortionCount %3==0)
				{
					float fT = fAmount*0.9 + 0.1f;
					Effect_ImageTrail_Start(0.95f*fT, 0.1f, 0.4, 0.2f);
					//Effect_Shake_Start(cMath_RandRectf(0.05f, 0.4f)*fT, 0.2, 0.1f, 0.15f, cVector3f(1,0,0));
				}
			}
		}
		
		/////////////////////////
		// Near player count
		if(mbIsAkers && lState != eVictimState_HideAndWait)
		{
			if(mBaseObj.GetDistanceToPlayer()<10.0f)
			{
				mfNearPlayerCount += afTimeStep;
				if(mfNearPlayerCount>20*3)
					mfNearPlayerCount = 20*3;
			}
			else
			{
				mfNearPlayerCount -= afTimeStep*0.5f;
				if(mfNearPlayerCount<0)
					mfNearPlayerCount=0;
			}
		}
		
		/////////////////////////
		// Insta hunt
		if(	lState != eVictimState_HideAndWait &&
			lState != eVictimState_Retreat &&
			lState != eVictimState_Hunt &&
			AttackMeter_GetPlayerIsRecovering()==false &&
			mfRetreat_InsideRepelAreaCount <= 0 &&
			mBaseObj.GetSensesActive())
		{	
			mfCheckHuntCount += afTimeStep;
			if(mfCheckHuntCount>0.1f)
			{
				mfCheckHuntCount=0;
				
				////////////////
				// Basic variable setup
				iCharacterBody @pCharBody = mBaseObj.GetCharBody();
				float fDistToPlayer = mBaseObj.GetDistanceToPlayer();
				float fPlayerSpeed = cLux_GetPlayer().GetAverageMoveSpeed();
				float fPlayerHealth = cLux_GetPlayer().GetHealth();
				
				////////////////
				// Check for difficult mode
				bool bHardMode = false;
				if(mbIsAkers && mlNumOfKnockDowns==0)
					bHardMode=true;
					
				bool bEasyMode = false;
				if(mbIsAkers && (mlNumOfKnockDowns>2 || fPlayerHealth<0.3f) )
					bEasyMode = true;
				if(mbIsAkers==false && (mlNumOfKnockDowns>1 || fPlayerHealth<0.5f) )
					bEasyMode = true;
					
				if(mbBadHearing)
				{
					bHardMode=false;
					bEasyMode=true;
				}
				
				////////////////
				// Get Angle
				cVector3f vToPlayer = mBaseObj.GetPlayerPos() - pCharBody.GetPosition();
				vToPlayer.y=0; vToPlayer.Normalize();
				
				float fAngle = cMath_Vector3Angle(vToPlayer, pCharBody.GetForward());
				//cLux_AddDebugMessage("Angle: "+ cMath_ToDeg(fAngle));
				
				////////////////
				// Set speed
				float fMaxHuntDistance = 1.55f;
				bool bRequireMovement = GameOver_GetTimeSinceLastGameOver() < 60*5 || 
										cLux_GetPlayer().GetHealth() < 0.5f;
				
				if(bEasyMode==false)
				{
					if(fAngle < cMath_ToRad(80))
					{
						if(fPlayerSpeed > 4.0f)
							fMaxHuntDistance *= bHardMode ? 6.0f : 3.25f;
						else if(fPlayerSpeed > 1.95f)
							fMaxHuntDistance *= 2.25f;
						else if(fPlayerSpeed > 1.15f)
							fMaxHuntDistance *= 1.75f;
							
						if(bHardMode) fMaxHuntDistance *= 1.5f;
					}
					else
					{
						if(fPlayerSpeed > 4.0f)
							fMaxHuntDistance *= bHardMode ? 6.0f : 2.5f;
						else if(fPlayerSpeed > 1.5f)
							fMaxHuntDistance *= 1.75f;
					}
				}

				
				////////////////
				// Run test
				if(bEasyMode==false)
				{
					if(fPlayerSpeed > 4.0f)
						mfPlayerRunCount += 0.1f;
					else
						mfPlayerRunCount = cMath_IncreaseTo(mfPlayerRunCount, 0.1f, 0);
					
					if(mfPlayerRunCount>2.8f && fDistToPlayer < 20)
					{
						if (cLux_GetExplorationModeActive() == false)
						{
							mpStateMachine.ChangeState(eVictimState_Hunt);
							mfPlayerRunCount =0;
						}						
					}
				}
				////////////////
				// Check if we should start hunt mode
				if(	fDistToPlayer < fMaxHuntDistance &&
					mBaseObj.PlayerIsDetected() &&
					(bRequireMovement==false || cLux_GetPlayer().GetAverageMoveSpeed()>0.9))
				{
					if (cLux_GetExplorationModeActive() == false)
					{
						mpStateMachine.ChangeState(eVictimState_Hunt);
					}
				}
			}	
		}		
		
		if (cLux_GetExplorationModeActive() == false) return;		
		/////////////////////////////////////
		// Enter avoid if player too close
		float fMinDist = mbIsAkers ? 1000.f : 4.f;
		if (mbIsAkers && mBaseObj.GetEntityIsInPlayerLineOfSight(true) == false)
		{
			if (mBaseObj.GetVarBool("ExplorationMode_InHideZone") == true ||
				mBaseObj.GetVarBool("ExplorationMode_PlayerInHideZone") == true)
			{
				fMinDist = 3.f;
			}
			else
			{
				fMinDist = 8.f;
			}			
		}
		if (mBaseObj.GetDistanceToPlayer() <= fMinDist)
		{
			if (lState == eVictimState_AvoidPlayer || lState == eVictimState_Hunt ||
				lState == eVictimState_HuntPause || lState == eVictimState_AfterHunt ||
				lState == eVictimState_LiftPlayer || lState == eVictimState_HideAndWait)
				return;
				
			mfExplorationMode_EnterAvoidCount += afTimeStep;
			
			if (mbIsAkers == true && 
				mfExplorationMode_EnterAvoidCount > 1.f  && 
				mBaseObj.GetVarBool("ExplorationMode_SkipAvoid") == false ||
				mbIsAkers == false)
			{
				mfExplorationMode_EnterAvoidCount = 0.f;
				mpStateMachine.ChangeState(eVictimState_AvoidPlayer);
			}			
		}
		
		if (mfExplorationMode_IgnorePlayerCount > 0)
		{
			mfExplorationMode_IgnorePlayerCount -= afTimeStep;
		}
	}
	
	//------------------------------------------------------------
	
	float mfCheckAmbientMusicCount=0;
	bool mbAmbientMusicActive = false;
	void UpdateCheckAmbientMusic(float afTimeStep)
	{
		mfCheckAmbientMusicCount-=afTimeStep;
		if(mfCheckAmbientMusicCount>0) return;
		mfCheckAmbientMusicCount = 0.25f;
		
		int lState = mpStateMachine.GetCurrentState();
		
		if(	lState == eVictimState_Hunt ||
			lState == eVictimState_OpenDoor ||
			mBaseObj.GetSensesActive()==false ||
			(mbAmbientMusicActive==false && lState== eVictimState_HideAndWait) ||
			mbAlertMusic_Active ||
			mfAlertMusic_FadeCount>0
			)
		{
			return;
		}
		
		if(mbAmbientMusicActive)
		{
			if(	(mBaseObj.PlayerIsDetected()==false && 
				mBaseObj.GetEntityIsInPlayerLineOfSight(false)==false &&
				mBaseObj.GetDistanceToPlayer() > 18.5f) ||
				lState == eVictimState_HideAndWait)
			{
				mbAmbientMusicActive = false;
				Music_RemoveDynamicTrack(mBaseObj.GetID());
			}
		}
		else
		{
			bool bCalmState = 	lState == eVictimState_Patrol || 
								lState == eVictimState_Idle ||
								lState == eVictimState_Wander ||
								lState == eVictimState_Retreat;
								
			float fPlayerDist = mBaseObj.GetDistanceToPlayer();
			if(	mBaseObj.PlayerIsDetected() || 
				mBaseObj.GetEntityIsInPlayerLineOfSight(false) ||
				(fPlayerDist < 12.0f && bCalmState==false) ||
				fPlayerDist < 7.5f)
			{
				mbAmbientMusicActive = true;
				if(mbIsAkers)
					Music_AddDynamicTrack(	mBaseObj.GetID(), 0, eMusicPrio_AgentAmb, 
											gsVictimAmbientMusicAkers,gfVictimAmbientMusicAkersVolume, 5,5);	
				else
				{
					int lPrevState = mpStateMachine.GetPrevState();
					
					if(lPrevState == eVictimState_Hunt)
						Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAmbTransition, gsVictimHuntToAmbientMusic, gfVictimHuntToAmbientMusicVolume, 0, 1);
						
					else if(lPrevState == eVictimState_Investigate || lPrevState == eVictimState_Search)
						Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAmbTransition, gsVictimAlertToAmbientMusic, gfVictimAlertToAmbientMusicVolume, 0, 1);
					
					else	
						Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAmbTransition, gsVictimStrightToAmbientMusic, gfVictimStrightToAmbientMusicVolume, 0, 1);
						
					Music_AddDynamicTrack(	mBaseObj.GetID(), 0, eMusicPrio_AgentAmb, 
											gsVictimAmbientMusic,gfVictimAmbientMusicVolume, 5,5);	
				}
			}
			
		}
		
	}

	//------------------------------------------------------------
	
	void ResetProperties()
	{
		cScrAgentHumanoid::ResetProperties();
	}
	
	//------------------------------------------------------------
	
	void OnRecieveMessage(int alMessageId, cLuxEntityMessageData @apData)
	{
	}
	
	//------------------------------------------------------------
	
	void OnSetActive(bool abX)
	{
		cScrAgentHumanoid::OnSetActive(abX);
		
		if(abX)
		{
			if(mpStateMachine.GetCurrentState() == eVictimState_HideAndWait)
			{
				mBaseObj.GetCharBody().SetActive(false);
				mBaseObj.GetMeshEntity().SetActive(false);
				mBaseObj.GetMeshEntity().SetVisible(false);	
			}
		}
		else
		{
			mbWasJustActivated =true;
						
			Music_RemoveDynamicTrack(mBaseObj.GetID());
			
			AttackMeter_RemoveInstance(mBaseObj.GetID());
		}
	}
	
	//------------------------------------------------------------
	
	//} END GENERAL
	
	/////////////////////////////////////////
	// STATES
	//{//////////////////////////////////////
	
	//------------------------------------------------------------
	
		///////////////////////////////////
		// State Helpers
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		void SetDefaultSoundRadiusMul()
		{
			mpSoundListener.SetSoundRadiusMul(1.5f);
		}
		
		//------------------------------------------------------------
		
		bool mbUsingSearchMoveAnimations=false;
		
		void SetDefaultMoveAnimations()
		{
			if(mbIsAkers==false) return;
			
			if(mbUsingSearchMoveAnimations==false) return;
			mbUsingSearchMoveAnimations=false;
			
			mpMover.SetIdleAnimName("idle");
			mpMover.SetWalkAnimName("walk");
			mpMover.SetupIdleExtra("idle_extra_", 1, 6, true);
			
			mpMover.SetUseMoveStateAnimations(false);
			mpMover.SetUseMoveStateAnimations(true);
		}
		
		void SetAlertMoveAnimations()
		{
			if(mbIsAkers==false) return;
			
			if(mbUsingSearchMoveAnimations) return;
			mbUsingSearchMoveAnimations=true;
			
			mpMover.SetIdleAnimName("idle_search");
			mpMover.SetWalkAnimName("walk_search");
			mpMover.SetupIdleExtra("idle_search_extra_", 1, 6, true);
			
			mpMover.SetUseMoveStateAnimations(false);
			mpMover.SetUseMoveStateAnimations(true);
		}
		
		void SetDefaultMinHuntDistance()
		{
			mfMinStartHuntDistance = 2.5f;
		}
		
		void SetDefaultDistortion()
		{
			DistortionEffect_AddInstance(mBaseObj.GetID(), 20, 4, 0.3f, eEasing_QuadIn);
		}

		void AddAmbientMusic()
		{
			//Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentAmb,gsInfectedRobotAmbientMusic, gfInfectedRobotAmbientMusicVolume, 10, 10);
		}
		
		//------------------------------------------------------------
		
		//} END State Helpers
	
		///////////////////////////////////
		// Default State
		//{////////////////////////////////
	
		//------------------------------------------------------------
		
		bool State_Default_Message(int alMessageId)
		{
			//////////////////////
			// Hit by Prop
			if(alMessageId == eLuxEntityMessage_HitByProp)
			{				
				cVector3f vX = mpStateMachine.GetCurrentMessageData().mvX;
				cLux_AddDebugMessage("" + vX.x);
				if(vX.x < 1.25f) return false;//Speed
				if(cLux_GetPlayer().IsDead()) return false;
				if(mBaseObj.GetSensesActive()==false) return false;
				if(cLux_GetPlayer().GetTimeSincePhysicsObjectInteraction()>2.0f) return false;
				
				int lState = mpStateMachine.GetCurrentState();
				
				if (cLux_GetExplorationModeActive())
				{
					if (vX.x > 2.25f && (lState == eVictimState_Search || lState == eVictimState_AvoidPlayer))
					{
						mpStateMachine.ChangeState(eVictimState_Hunt);
					}					
					return true;
				}				
				
				if(lState != eVictimState_Hunt)
				{
					if(lState == eVictimState_Search)
						mpStateMachine.ChangeState(eVictimState_Hunt);
					else
						mpStateMachine.ChangeState(eVictimState_Search);
				}
					
				return true;
			}
			//////////////////////
			// Sound heard
			else if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				if (cLux_GetExplorationModeActive() && mfExplorationMode_IgnorePlayerCount > 0)
				{
					if (mpStateMachine.GetCurrentMessageData().msX != "ScriptedEvent") return true;				
				}
				
				int lState = mpStateMachine.GetCurrentState();
				
				if (lState == eVictimState_AvoidPlayer) return true;
							
				mvInvestigate_Goal = mpStateMachine.GetCurrentMessageData().mvX;
				mlInvestigate_SoundPrio = mpStateMachine.GetCurrentMessageData().mlX;				
				
				mpStateMachine.ChangeState(eVictimState_Investigate);
				
				cLux_AddDebugMessage("Victim heard sound: "+mpStateMachine.GetCurrentMessageData().msX);
			
				return true;
			}
			//////////////////////
			// Force to position
			else if(alMessageId == eLuxEntityMessage_ForceToPosition)
			{
				mvRetreat_Position = mpStateMachine.GetCurrentMessageData().mvX;
				
				mpStateMachine.ChangeState(eVictimState_Retreat);
				
				return true;
			}
			//////////////////////
			// Near Door
			else if(alMessageId == eLuxEntityMessage_NearDoor)
			{				
				tID idDoor = mpStateMachine.GetCurrentMessageData().mID;
				
				if(mBaseObj.GetCharBody().GetMoveSpeed(eCharDir_Forward)>0.1f)
				{
					cScript_SetGlobalArgID(0, mBaseObj.GetID());
					cScript_RunGlobalFunc(cLux_ID_Entity(idDoor).GetName(),"","_Global_AgentNear");
					
					bool bRet = cScript_GetGlobalReturnBool();
					if(bRet)
					{
						mpStateMachine.ChangeState(eVictimState_OpenDoor);
					}
					else
					{
						mBaseObj.SetCheckForDoorsCount(3);
					}
				}
				
				return true;
			} 
			
			
			
			return false;
		}
	
		//------------------------------------------------------------
		
		//} END Default State
	
		///////////////////////////////////
		// STATE: HideAndWait
		//{////////////////////////////////
	
		//------------------------------------------------------------
		
		bool mbHideAndWait_First=true;
		float mfHideAndWait_AppearCount=100;
		
		bool mbHideAndWait_UseCustomGoalPosition=false;
		cVector3f mvHideAndWait_CustomGoalPosition;
		float mfHideAndWait_CustomGoalMinDist=3.0f;
	
		//------------------------------------------------------------
		
		void State_HideAndWait_Enter()
		{
			if(mpPathfinder.GetTrackNodeNum()>0)
			{
				mpStateMachine.ChangeState(eVictimState_Patrol);
				return;
			}
			
			mfTimeSinceLastDisappear = 0;
			mvLastDisappearPosition = mBaseObj.GetPosition();
			
			mpBarkMachine.ChangeState(eVictimBark_Silent);
			//DistortionEffect_RemoveInstance(mBaseObj.GetID());
			
			mpStateMachine.AddTimer("UpdateState", 0.25);
			mpStateMachine.AddTimer("RandomBark", cMath_RandRectf(13, 80 - mfAgressionAmount*40));
			mpStateMachine.AddTimer("RandomSteps", cMath_RandRectf(30, 100 - mfAgressionAmount*50));
			
			mpPathfinder.Stop();
			
			mBaseObj.GetCharBody().SetActive(false);
			mBaseObj.GetMeshEntity().SetActive(false);
			mBaseObj.GetMeshEntity().SetVisible(false);
			
			SetDefaultMinHuntDistance();
			SetDefaultMoveAnimations();
			SetDefaultSoundRadiusMul();
			
			mfHideAndWait_AppearCount = cMath_RandRectf(100, 140);
			if(mbHideAndWait_First) 
			{
				mfHideAndWait_AppearCount = 130;
				mbHideAndWait_First = false;
			}
				
		}
		
		//------------------------------------------------------------
		
		void State_HideAndWait_Leave()
		{
			mBaseObj.GetCharBody().SetActive(true);
			mBaseObj.GetMeshEntity().SetActive(true);
			mBaseObj.GetMeshEntity().SetVisible(true);
		}
		
		//------------------------------------------------------------
		
		void State_HideAndWait_Update(float afTimeStep)
		{
			///////////////////////////////////////
			// If suddenly get tracks, go out of hiding
			if(mpPathfinder.GetTrackNodeNum()>0)
			{
				mfHideAndWait_AppearCount=0;
			}
			
			///////////////////////////////////////
			// Update counter
			if(mbHideAndWaitPaused==false)
				mfHideAndWait_AppearCount -= afTimeStep / cMath_Max(mfComeOutOfHidingTimeMul, 0.0001f);
			
			///////////////////////////////////////
			// CHeck if time to appear
			if(mfHideAndWait_AppearCount <=0)
			{
				float fMinAppearDistFromPlayer = 10 + cMath_RandRectf(5, 15) * (1-mfAgressionAmount);
				
				bool bRet = true;
				
				///////////////////////////////////////
				// Custom Goal position
				if(mbHideAndWait_UseCustomGoalPosition)
				{
					bRet = Wander_Begin(mvHideAndWait_CustomGoalPosition, mfHideAndWait_CustomGoalMinDist, fMinAppearDistFromPlayer);
					mbHideAndWait_UseCustomGoalPosition = false;
				}
				///////////////////////////////////////
				// Random goal position
				else
				{
					float fBaseDist = 13 - mfAgressionAmount*11.0f;
					float fMinFromPos = cMath_RandRectf(fBaseDist, fBaseDist*1.5f);
					
					if (cLux_GetExplorationModeActive())
					{
						fMinFromPos *= 2.f;
						fMinAppearDistFromPlayer *= 2.f;
						cLux_AddDebugMessage("SPAWN FURTHER AWAY!");
					}
				
					bRet = Wander_Begin(mBaseObj.GetPlayerPos(), fMinFromPos, fMinAppearDistFromPlayer);
				}
				
				if(bRet)
				{
					mBaseObj.PlaySound("_VictimSpawn", "victim_vent_spawn.snt", true, true);
					
					mpStateMachine.ChangeState(eVictimState_Wander);
					
					if (cLux_GetExplorationModeActive() == false) return;
					mBaseObj.SetVarBool("ExplorationMode_InHideZone", false);
				}
				else
				{
					mfHideAndWait_AppearCount = cMath_RandRectf(70, 140);
				}
			}
		}
		
		//------------------------------------------------------------
		
		int mlHideAndWait_StepSoundCount=0;
		float mfHideAndWait_StepSoundDistance=0;
		void State_HideAndWait_TimerUp(uint64 alId)
		{
			//////////////////////
			// Update the position
			if(alId ==H64("UpdateState"))
			{
				float fWantedDistance = 30.0f - mfAgressionAmount*20.0f;
				
				cVector3f vDir = mBaseObj.GetPosition() - mBaseObj.GetPlayerPos();
				vDir.Normalize();
				mBaseObj.SetPosition(mBaseObj.GetPlayerPos() + vDir*fWantedDistance);
				
				mpStateMachine.AddTimer("UpdateState", 1.0f);
			}
			//////////////////////
			// RandomBark
			if(alId ==H64("RandomBark"))
			{
				float fDiv = mfComeOutOfHidingTimeMul<0.1 ? 1.0f/0.1f :  1.0f / mfComeOutOfHidingTimeMul;
				if(mfHideAndWait_AppearCount>20 / fDiv || mbHideAndWaitPaused)
				{
					cLux_AddDebugMessage("Random Bark plays");
					mBaseObj.PlaySound("RandomBark", gsVictim_RandomEvent_BarkSound, true, true);
				}
				
				float fTime = cMath_RandRectf(13, 80 - mfAgressionAmount*45);
				mpStateMachine.AddTimer("RandomBark", fTime);
			}
			//////////////////////
			// Random step
			if(alId ==H64("RandomSteps"))
			{
				float fDiv = mfComeOutOfHidingTimeMul<0.1 ? 1.0f/0.1f :  1.0f / mfComeOutOfHidingTimeMul;
				if(mfHideAndWait_AppearCount>20 / fDiv || mbHideAndWaitPaused)
				{
					cLux_AddDebugMessage("Random Step plays");
					mlHideAndWait_StepSoundCount = cMath_RandRectl(3, 7);
					mfHideAndWait_StepSoundDistance = cMath_RandRectf(14, 25);
					
					mpStateMachine.AddTimer("RandomStep_Sound", cMath_RandRectf(1, 1.5));
				}
				
				mpStateMachine.AddTimer("RandomSteps", cMath_RandRectf(20, 100 - mfAgressionAmount*55));
			}
			//////////////////////
			// Random stepsound
			if(alId ==H64("RandomStep_Sound"))
			{
				cLux_AddDebugMessage("Random Step sound. Count: "+mlHideAndWait_StepSoundCount+" Dist: "+mfHideAndWait_StepSoundDistance);
				//mBaseObj.PlaySound("Step", gsVictim_RandomEvent_WalkStepSound, true, true);
				
				cVector3f vToVictim = mBaseObj.GetPosition() - mBaseObj.GetPlayerPos();
				vToVictim.Normalize();
				
				cVector3f vPos = mBaseObj.GetPlayerPos() + vToVictim*mfHideAndWait_StepSoundDistance; 
					
				cSoundEntity@ pSound = cLux_GetCurrentMap().GetWorld().CreateSoundEntity("RandomStep", gsVictim_RandomEvent_WalkStepSound, true);
				if(pSound !is null)
				{
					pSound.SetPosition(vPos);
					
					pSound.SetScriptableIsSaved(false);
				}
				
				mfHideAndWait_StepSoundDistance += cMath_RandRectf(0.0,1.0);
				mlHideAndWait_StepSoundCount--;
				if(mlHideAndWait_StepSoundCount<=0) return;
				
				mpStateMachine.AddTimer("RandomStep_Sound", cMath_RandRectf(1, 1.5));
			}
			
		}
		
		//------------------------------------------------------------
		
		bool State_HideAndWait_Message(int alMessageId)
		{
			//////////////////////
			// Sound heard
			if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				if (cLux_GetExplorationModeActive()) return true;
				
				if(mfAgressionAmount<0.5f) return true;
				if(mbHideAndWaitPaused) return true;
				
				if(mfTimeSinceLastScream>1)
				{
					mBaseObj.PlaySound("Alert",gsVictimSound_InvestigateStart,true, true);
					mfTimeSinceLastScream = 0.0f;
				}
			
				cVector3f vPos = mpStateMachine.GetCurrentMessageData().mvX;
				
				mbHideAndWait_UseCustomGoalPosition=true;
				mvHideAndWait_CustomGoalPosition = vPos;
				mfHideAndWait_CustomGoalMinDist = 3.0f;	
				mfHideAndWait_AppearCount=0;			
				
				return true;
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END State HideAndWait
		
		///////////////////////////////////
		// STATE: Idle
		//{////////////////////////////////
	
		//------------------------------------------------------------
		
		void State_Idle_Enter()
		{
			mpBarkMachine.ChangeState(eVictimBark_Idle);
			
			SetDefaultMinHuntDistance();
			SetDefaultMoveAnimations();
			SetDefaultSoundRadiusMul();
			
			mpPathfinder.SetTrackPaused(true);
			
			if(mpPathfinder.GetTrackNodeNum()<=0 && mbWasJustActivated)
			{
				mbWasJustActivated=false;
				mpStateMachine.ChangeState(eVictimState_HideAndWait);
			}
			else
			{
				mpStateMachine.AddTimer("CheckState", 0.25);
			}
		}
		
		//------------------------------------------------------------
		
		void State_Idle_TimerUp(uint64 alId)
		{
			//////////////////////
			// Update destionation 
			if(alId ==H64("CheckState"))
			{
				if(mpPathfinder.GetTrackNodeNum()>0)
					mpStateMachine.ChangeState(eVictimState_Patrol);
				else
					mpStateMachine.ChangeState(eVictimState_Wander);
					
				mpStateMachine.AddTimer("CheckState", 0.25);
			}
		}
		
		//------------------------------------------------------------
		
		bool State_Idle_Message(int alMessageId)
		{
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END Idle
		
		///////////////////////////////////
		// STATE: AfterKnockDown
		//{////////////////////////////////
	
		//------------------------------------------------------------
		
		void State_AfterKnockDown_Enter()
		{
			mpBarkMachine.ChangeState(eVictimBark_Idle);
			
			SetDefaultMinHuntDistance();
			SetDefaultMoveAnimations();
			SetDefaultSoundRadiusMul();
			
			mpPathfinder.SetTrackPaused(true);
			
			mpStateMachine.AddTimer("StartMoving", cMath_RandRectf(9, 13));
		}
		
		void State_AfterKnockDown_Leave()
		{
			mpPathfinder.SetTrackPaused(false);
		}
		
		void State_AfterKnockDown_TimerUp(uint64 alId)
		{
			//////////////////////
			// Update destionation 
			if(alId ==H64("StartMoving"))
			{
				if(mpPathfinder.GetTrackNodeNum()>0)
					mpStateMachine.ChangeState(eVictimState_Patrol);
				else
					mpStateMachine.ChangeState(eVictimState_Wander);
			}
		}
		
		//------------------------------------------------------------
		
		//} END AfterKnockDown
		
		///////////////////////////////////
		// STATE: Patrol
		//{////////////////////////////////
	
		//------------------------------------------------------------
		
		void State_Patrol_Enter()
		{
			//SetDefaultDistortion();
			SetDefaultMinHuntDistance();
			SetDefaultSoundRadiusMul();
			
			mpMover.SetSpeedState(eVictimSpeed_Walk);
			mpBarkMachine.ChangeState(eVictimBark_Idle);
			
			mpPathfinder.SetTrackPaused(false);
			
			mpStateMachine.AddTimer("CheckSpeedUpdate", 1.0f);
		}
		
		void State_Patrol_Leave()
		{
			mpPathfinder.SetTrackPaused(true);
		}
			
		//------------------------------------------------------------
		
		void State_Patrol_TimerUp(uint64 alId)
		{
			///////////////////////////
			// Check Speed Update
			if(alId == H64("CheckSpeedUpdate"))
			{
				if(	mBaseObj.GetDistanceToPlayer() > 9 &&
					mBaseObj.GetEntityIsInPlayerLineOfSight(true)==false)
				{
					mpMover.SetSpeedState(eVictimSpeed_FastWalk);
				}
				else
				{
					mpMover.SetSpeedState(eVictimSpeed_Walk);
				}
				
				mpStateMachine.AddTimer("CheckSpeedUpdate", 1.0f);
			}
		}
				
		//------------------------------------------------------------
		
		bool State_Patrol_Message(int alMessageId)
		{
						
			return false;
		}
		//------------------------------------------------------------
		
		//} END Patrol
		
		///////////////////////////////////
		// STATE: Wander
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		cVector3f mvWander_Goal;
		bool mbWander_GoalHasBeenSet=false;
		bool mbWander_ReachedGoal=false;
		float mfWander_SearchAroundPlayerCount=0;
		bool mbWander_SearchAroundPlayerStopped=false;
		bool mbWander_MovingHome;
		int mlWander_MovingHomeOutOfSightCount;
		
		//------------------------------------------------------------
		
		void State_Wander_Enter()
		{
			///////////////////////////
			// Set basic values
			SetDefaultMinHuntDistance();
			SetDefaultSoundRadiusMul();
			
			///////////////////////////
			// Setup states
			mpMover.SetSpeedState(eVictimSpeed_Walk);
			mpBarkMachine.ChangeState(eVictimBark_Idle);
			
			///////////////////////////
			// Set up variables
			mfWander_SearchAroundPlayerCount = cMath_RandRectf(3, 8) * (1.0f + mfAgressionAmount*0.5f);
			mbWander_SearchAroundPlayerStopped = false;
			mbWander_MovingHome=false;
			
			///////////////////////////
			// Goal is set
			if(mbWander_GoalHasBeenSet)
			{
				mbWander_ReachedGoal = false;
				mpPathfinder.MoveTo(mvWander_Goal, 1.0f, false);
				
				mpStateMachine.AddTimer("CheckReachedGoal", 1.0f);
			}
			///////////////////////////
			// No Goal set.
			else
			{
				if(mpStateMachine.GetPrevState() == eVictimState_OpenDoor)
				{
					mpPathfinder.MoveTo(mvWander_Goal, 1.0f, false);
					
					if(mbWander_ReachedGoal==false)
						mpStateMachine.AddTimer("CheckReachedGoal", 0.5f);	
				}
				else
				{
					mbWander_ReachedGoal=true;
				}
			}
			
			mpStateMachine.AddTimer("CheckMoveUpdates", 1.0f);
			mpStateMachine.AddTimer("CheckSpeedUpdate", 1.0f);
		}
		
		//------------------------------------------------------------
		
		void State_Wander_Leave()
		{
			mbWander_GoalHasBeenSet = false;
		}
			
		//------------------------------------------------------------
		
		void State_Wander_Update(float afTimeStep)
		{
			/////////////////////////////////
			// If suddenly gets track node use those
			if(mpPathfinder.GetTrackNodeNum()>0)
			{
				mpStateMachine.ChangeState(eVictimState_Patrol);
				return;
			}
		
			
			if(mbWander_ReachedGoal && mfWander_SearchAroundPlayerCount>0)
			{
				mfWander_SearchAroundPlayerCount -= afTimeStep;
			}		

			//cLux_AddDebugMessage("" + mfWander_SearchAroundPlayerCount);
		}
		
		//------------------------------------------------------------
				
		void State_Wander_TimerUp(uint64 alId)
		{
			//////////////////////////////
			// Check Reached Goal
			if(alId == H64("CheckReachedGoal"))
			{
				if(cMath_Vector3Dist(mBaseObj.GetCharBody().GetPosition(), mvWander_Goal)<3.0f)
				{
					mbWander_ReachedGoal = true;
					return;
				}
				mpStateMachine.AddTimer("CheckReachedGoal", 0.5f);
			}
			//////////////////////////////
			// Check Speed Update
			if(alId == H64("CheckSpeedUpdate"))
			{
				if(	mBaseObj.GetDistanceToPlayer() > 10 && mfAgressionAmount>0.5f &&
					mBaseObj.GetEntityIsInPlayerLineOfSight(true)==false)
				{
					mpMover.SetSpeedState(eVictimSpeed_SlowRun);
				}
				else if(mBaseObj.GetDistanceToPlayer() > 4)
				{
					mpMover.SetSpeedState(eVictimSpeed_FastWalk);
				}
				else
				{
					mpMover.SetSpeedState(eVictimSpeed_Walk);
				}
				
				mpStateMachine.AddTimer("CheckSpeedUpdate", 1.0f);
			}
			//////////////////////////////
			// Check Move Update
			if(alId == H64("CheckMoveUpdates"))
			{
				///////////////////////////
				// Moving Home
				if(mbWander_MovingHome)
				{
					if(mBaseObj.GetDistanceToPlayer()>10 && Wander_InLineOfSight()==false)
					{
						mlWander_MovingHomeOutOfSightCount++;
						if(mlWander_MovingHomeOutOfSightCount>=10)
						{
							mpStateMachine.ChangeState(eVictimState_HideAndWait);
						}
						
						mpStateMachine.AddTimer("CheckMoveUpdates", 0.2f);
					}
					else
					{
						mlWander_MovingHomeOutOfSightCount=0;
						
						mpStateMachine.AddTimer("CheckMoveUpdates", 1.5f);
					}
				}
				///////////////////////////
				// Search around player
				else if(mbWander_ReachedGoal && mfWander_SearchAroundPlayerCount>0)
				{
					if(mbWander_SearchAroundPlayerStopped==false && cMath_RandRectl(0,2)==0)
					{
						mpPathfinder.Stop();
						mbWander_SearchAroundPlayerStopped=true;
						
						mpStateMachine.AddTimer("CheckMoveUpdates", cMath_RandRectf(1, 3));
					}
					else if(mpPathfinder.IsMoving())
					{
						mpPathfinder.Stop();
						mpStateMachine.AddTimer("CheckMoveUpdates", cMath_RandRectf(1, 2));
					}
					else
					{
						cVector3f vCenterPos = mBaseObj.GetPlayerFeetPos();
						float fMin = 5;
						float fMax = 9;
						float fDurationMul =1.0f;
						
						if( (mBaseObj.GetDistanceToPlayer()<10 && cMath_RandRectl(0,2)==0)
							||
							mfNearPlayerCount>60.0f)
						{
							cVector3f vPlayerToVictim = mBaseObj.GetPosition() - mBaseObj.GetPlayerPos();
							vPlayerToVictim.y=0; vPlayerToVictim.Normalize();
							vCenterPos = mBaseObj.GetCharBody().GetFeetPosition() + vPlayerToVictim*3.0f;
							fDurationMul = 1.5f;
						}
						
						cAINode @pNode = mpPathfinder.GetNodeAtPos(vCenterPos, fMin, fMax, false, false, false, null);
						if(pNode !is null)
						{
							mvWander_Goal = pNode.GetPosition();
							mpPathfinder.MoveTo(pNode.GetPosition(), 1, false);
							
							mbWander_SearchAroundPlayerStopped=false;
						}
						
						mpStateMachine.AddTimer("CheckMoveUpdates", cMath_RandRectf(1, 3)*fDurationMul);
					}
				}
				///////////////////////////
				// Go Home
				else if(mfWander_SearchAroundPlayerCount<=0)
				{
					cVector3f vPos;
					cVector3f vPlayerToVictim = mBaseObj.GetPosition() - mBaseObj.GetPlayerPos();
					vPlayerToVictim.y=0; vPlayerToVictim.Normalize();
					cVector3f vSpawnPos = mBaseObj.GetPosition() + vPlayerToVictim*5.0f;
					
					if(Wander_GetRandomSpawnPos(vSpawnPos ,14, 30, true, vPos))
					{
						mvWander_Goal = vPos;
						mpPathfinder.MoveTo(vPos, 1, false);
						mbWander_MovingHome = true;
						mlWander_MovingHomeOutOfSightCount=0;
					}
					else
					{
						mfWander_SearchAroundPlayerCount=2;
					}
					
					mpStateMachine.AddTimer("CheckMoveUpdates", 1.0f);
				}
				//////////////////////////
				// Default
				else
				{
					
					mpStateMachine.AddTimer("CheckMoveUpdates", 1.0f);
				}
			}
			//////////////////////////////
			// EndMovingHome
			if(alId == H64("EndMovingHome"))
			{
				mbWander_MovingHome=false;
				mfWander_SearchAroundPlayerCount=2.0f;
			}
		}
				
		//------------------------------------------------------------
		
		bool State_Wander_Message(int alMessageId)
		{
			///////////////////////////////
			// End of Track
			if(alMessageId == eLuxEntityMessage_EndOfPath)
			{
				if(mbWander_ReachedGoal==false)
				{
					mbWander_ReachedGoal=true;
				}
				
				if(mbWander_MovingHome)
				{
					mpStateMachine.AddTimer("EndMovingHome", 7.0f);
				}
				
				return true;
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END State Wander
		
		///////////////////////////////////
		// STATE: Investigate
		//{/////////////////////////////////
	
		//------------------------------------------------------------
		
		cVector3f mvInvestigate_Goal;
		int mlInvestigate_SoundPrio;
		bool mbInvestigate_ReactionPlaying;
		
		float mfInvestigate_DistToLastSound;
		float mfInvestigate_EnterSearchCount;
		
		cVector3f mvInvestigate_NodePos;
		
		//------------------------------------------------------------
		
		void Investigate_OnHearNewSound(bool abCheckPrevState)
		{
			bool bOpenedDoor = mpStateMachine.GetPrevState() == eVictimState_OpenDoor;
			if(abCheckPrevState==false) bOpenedDoor = false;
			
			cLux_AddDebugMessage("time since scream: "+mfTimeSinceLastScream+" bOpenedDoor"+bOpenedDoor);
			if(mfTimeSinceLastScream>1 && bOpenedDoor==false)
			{
				mBaseObj.PlaySound("Alert",gsVictimSound_InvestigateStart,true, true);
				mfTimeSinceLastScream = 0;
				cLux_AddDebugMessage("Play Alert sound!: "+gsVictimSound_InvestigateStart);
			}
						
			mfInvestigate_DistToLastSound = mBaseObj.GetDistanceToPos(mvInvestigate_Goal);
			
			mpPathfinder.Stop();
			
			mbInvestigate_ReactionPlaying = true;
			mfInvestigate_EnterSearchCount=0;
			
			if(bOpenedDoor)
			{
				mpStateMachine.AddTimer("StartMoving",0.1f);
			}
			else
			{
				mpStateMachine.AddTimer("StartMoving", mbIsAkers ? 2.3f : 3.0f); //A slight paused before walking towards the sound.
				mpMover.PlayAnimation("hears_player");
			}
			
			mpStateMachine.AddTimer("UpdateSpeed", 1.0f); //Update speed	
			
			if(	mpStateMachine.GetPrevState() != eVictimState_HideAndWait &&
				cMath_Vector3Dist(mvInvestigate_Goal, mBaseObj.GetPlayerFeetPos())< 3.5f &&
				(	mbAmbientMusicActive || 
					mBaseObj.GetDistanceToPlayer()<7.0f || 
					mBaseObj.GetEntityIsInPlayerLineOfSight(true) )
				)
			{
				if(mbIsAkers)
					Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentAlert, gsVictimAlertMusicAkers, gfVictimAlertMusicAkersVolume, 5, 5);
				else
				{
					Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentAlert, gsVictimAlertMusic, gfVictimAlertMusicVolume, 5, 5);
				}
				mbAlertMusic_Active=true;
				mfAlertMusic_FadeCount=10.0f;
			}
			
			cLux_AddDebugMessage("Investigate, start reaction. Prio: "+mlInvestigate_SoundPrio+" Dist:"+mfInvestigate_DistToLastSound);
		}
		
		//------------------------------------------------------------
		
		void State_Investigate_Enter()
		{
			SetDefaultMinHuntDistance();
			SetDefaultMoveAnimations();
			SetDefaultSoundRadiusMul();
			
			int lSpeedState = eVictimSpeed_Walk;
			int lBarkState = eVictimBark_Idle;
			
			if (cLux_GetExplorationModeActive() && mbIsAkers == false)
			{
				lSpeedState = eVictimSpeed_Run;
				mBaseObj.PlaySound("InvestigateScream", gsVictimHuntSound, true, true);
			}			
			mpMover.SetSpeedState(lSpeedState);			
			mpBarkMachine.ChangeState(lBarkState);
			
			Investigate_OnHearNewSound(true);
		}
		
		//------------------------------------------------------------
				
		void State_Investigate_Leave()
		{
			mbAlertMusic_Active = false;
			mpMover.SetUseMoveStateAnimations(true);
		}
		
		//------------------------------------------------------------
		
		void State_Investigate_Update(float afTimeStep)
		{
			if(mfInvestigate_EnterSearchCount>0)
				mfInvestigate_EnterSearchCount -= afTimeStep*0.25f;
			
			float fMaxDist = cLux_GetPlayer().GetHealth()>0.7 ? 1.5f : 3.0f;
			if(mBaseObj.GetDistanceToPlayer() < fMaxDist)
			{
				mpStateMachine.ChangeState(eVictimState_PostInvestigate);	
			}
		}
			
		//------------------------------------------------------------
		
		void State_Investigate_TimerUp(uint64 alId)
		{
			///////////////////////
			// Walk towards the sound
			if(alId==H64("StartMoving"))
			{
				mpMover.SetSpeedState(eVictimSpeed_Walk);
				mbInvestigate_ReactionPlaying = false;

				cAINode@ pNode = mpPathfinder.GetNodeInPosLOS(mvInvestigate_Goal, 0, 10);
				if(pNode !is null)
				{
					mpPathfinder.MoveTo(pNode.GetPosition(), 0.5f, false,"Investigate_MoveToCallback");
					mvInvestigate_NodePos = pNode.GetPosition();
				}
				else
				{
					mpStateMachine.ChangeState(eVictimState_Idle);
				}
			}
			///////////////////////
			// Speed update
			if(alId==H64("UpdateSpeed"))
			{
				float fDistToGoal = cMath_Vector3Dist(mBaseObj.GetPosition(), mvInvestigate_Goal);
				float fDistToPlayer = mBaseObj.GetDistanceToPlayer();
				
				////////////////////////
				// Akers
				if(mbIsAkers)
				{
					if(fDistToPlayer> 15 && fDistToGoal>5.0f && mfAgressionAmount>0.5f)
					{
						mpMover.SetSpeedState(eVictimSpeed_SlowRun);
					}
					else if(fDistToPlayer> 10 && fDistToGoal>5.0f)
					{
						mpMover.SetSpeedState(eVictimSpeed_FastWalk);
					}
					else
					{
						mpMover.SetSpeedState(eVictimSpeed_Walk);
					}
				}
				////////////////////////
				// Normal pupet
				else
				{
					if( (fDistToGoal>16.0f) && fDistToPlayer>7.0f)
					{
						mpMover.SetSpeedState(eVictimSpeed_Run);
					}
					else if( (fDistToGoal > 10) && fDistToPlayer>5.5f)
					{
						mpMover.SetSpeedState(eVictimSpeed_SlowRun);
					}
					else if(fDistToGoal > 5 && fDistToPlayer>4.5f)
					{
						mpMover.SetSpeedState(eVictimSpeed_FastWalk);
					}
					else
					{
						mpMover.SetSpeedState(cLux_GetExplorationModeActive() ? eVictimSpeed_FastWalk : eVictimSpeed_Walk);
					}
				}
				
				mpStateMachine.AddTimer("UpdateSpeed", 0.3f);
			}
		}
		
		//------------------------------------------------------------
		
		
		void Investigate_MoveToCallback(bool abSuccess)
		{
			if(abSuccess==false)
			{
				mpStateMachine.ChangeState(eVictimState_PostInvestigate);	
			}
		}
		
		//------------------------------------------------------------
		
		bool State_Investigate_Message(int alMessageId)
		{
			//////////////////////////////////////
			// End of Path
			if(alMessageId == eLuxEntityMessage_EndOfPath)
			{
				if(mbInvestigate_ReactionPlaying==false)
				{
					cLux_AddDebugMessage("Go to Post Investigate!!");
					mpStateMachine.ChangeState(eVictimState_PostInvestigate);		
				}
				
				return true;
			}
			//////////////////////
			// Sound heard
			else if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				if (cLux_GetExplorationModeActive() && mfExplorationMode_IgnorePlayerCount > 0) return true;
				
				int lPrio = mpStateMachine.GetCurrentMessageData().mlX;
				float fDist  = mBaseObj.GetDistanceToPos(mpStateMachine.GetCurrentMessageData().mvX);
				
				if(	mlInvestigate_SoundPrio < lPrio || 
					((mlInvestigate_SoundPrio>=0 || mlInvestigate_SoundPrio==lPrio) && fDist < mfInvestigate_DistToLastSound-1.5f) )
				{
					mvInvestigate_Goal = mpStateMachine.GetCurrentMessageData().mvX;
					mlInvestigate_SoundPrio = lPrio;
					mfInvestigate_DistToLastSound = fDist;
				
					if (mbInvestigate_ReactionPlaying==false)
					{
						mpStateMachine.StopTimer("UpdateSpeed");
						
						Investigate_OnHearNewSound(false);
					}
				}
				
				if(	mlInvestigate_SoundPrio>0 && AttackMeter_GetPlayerIsRecovering()==false &&
					mBaseObj.GetDistanceToPlayer() < 10 && mBaseObj.PlayerIsDetected())
				{
					mfInvestigate_EnterSearchCount += 1.0f;
					if(mfInvestigate_EnterSearchCount>2.0f)
						mpStateMachine.ChangeState(eVictimState_Search);
				}
				
				return true;
			}
			
			
			return false;
		}

		//------------------------------------------------------------
		
		//} END Investigate
		
		///////////////////////////////////
		// STATE: Post Investigate
		//{/////////////////////////////////
		
		//------------------------------------------------------------
		
		void State_PostInvestigate_Enter()
		{
			SetDefaultMinHuntDistance();
			SetDefaultMoveAnimations();
			SetDefaultSoundRadiusMul();
			
			mlInvestigate_SoundPrio = -100;
			mfInvestigate_DistToLastSound = 9999.0f;
									
			mpMover.SetSpeedState(eVictimSpeed_FastWalk);
			
			mpPathfinder.Stop();
			
			mpBarkMachine.ChangeState(eVictimBark_Search);
			
			mpStateMachine.AddTimer("ReturnToIdle", cMath_RandRectf(4, 8));
		}
		
		//------------------------------------------------------------
		
		void State_PostInvestigate_Leave()
		{
			mbAlertMusic_Active =false;
			mpMover.SetUseMoveStateAnimations(true);
		}
		
		//------------------------------------------------------------
		
		void State_PostInvestigate_TimerUp(uint64 alId)
		{
			if(alId == H64("ReturnToIdle"))
			{
				mpStateMachine.ChangeState(eVictimState_Idle);
			}
		}
		
		bool State_PostInvestigate_Message(int alMessageId)
		{
			//////////////////////
			// Sound heard
			if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				int lPrio = mpStateMachine.GetCurrentMessageData().mlX;
				cVector3f vPos = mpStateMachine.GetCurrentMessageData().mvX;
				
				float fSoundToPlayerDist = cMath_Vector3Dist(vPos, mBaseObj.GetPlayerPos());
				
				if(fSoundToPlayerDist < 10  && AttackMeter_GetPlayerIsRecovering()==false &&
					mBaseObj.GetDistanceToPlayer() < 10 && mBaseObj.PlayerIsDetected())
				{
					mpMover.TurnToPos(vPos);
					mpStateMachine.ChangeState(eVictimState_Search);
					return true;	
				}
				else
				{
					return false;	
				}
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END Post Investigate
		
		///////////////////////////////////
		// STATE: Search
		//{/////////////////////////////////
	
		//------------------------------------------------------------
		
		cVector3f mvSearch_SoundPos;
		int mlSearch_SoundPrio;
		float mfSearch_SoundSensitivity;
		float mfSearch_TimeSinceLastSound;
		bool mbSearch_PauseAtStart;
		bool mbSearch_WalkingTowardsSound=false;
		
		//------------------------------------------------------------
		
		void State_Search_Enter()
		{
			if (cLux_GetExplorationModeActive() == false || mbIsAkers == false)
			{
				SetAlertMoveAnimations();
			}			
			SetDefaultSoundRadiusMul();
			
			mpPathfinder.Stop();
			mpMover.SetSpeedState(eVictimSpeed_Walk);
			
			mpBarkMachine.ChangeState(eVictimBark_Search);
			
			if(mfTimeSinceLastScream>3)
			{
				mBaseObj.PlaySound("SearchStart",gsVictimSound_SearchStart,true, true);
				mfTimeSinceLastScream = 0.0f;
			}
			
			mfMinStartHuntDistance = 2.5f;
			
			mlSearch_SoundPrio=-100;
			mfSearch_SoundSensitivity=0.0f;
			mfSearch_TimeSinceLastSound=100.0f;
			mbSearch_PauseAtStart=true;
			mbSearch_WalkingTowardsSound =false;
			
			//DistortionEffect_AddInstance(mBaseObj.GetID(), 20, 4, 0.6f, eEasing_QuadIn);
			
			if(mbIsAkers)
				Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentAlert, gsVictimAlertMusicAkers, gfVictimAlertMusicAkersVolume, 5, 5);
			else
			{
				int lPrevState = mpStateMachine.GetPrevState();
				
				if(lPrevState == eVictimState_Hunt)
					Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAlertTransition, gsVictimHuntToAlertMusic, gfVictimHuntToAlertMusicVolume, 0, 1);
					
				else if(lPrevState == eVictimState_Patrol || lPrevState == eVictimState_Wander)
					Music_AddDynamicTrack(mBaseObj.GetID(), 1, eMusicPrio_AgentToAlertTransition, gsVictimAmbientToAlertMusic, gfVictimAmbientToAlertVolume, 0, 1);
				
				Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentAlert, gsVictimAlertMusic, gfVictimAlertMusicVolume, 5, 5);
			}
				
			mbAlertMusic_Active=true;
			mfAlertMusic_FadeCount=10.0f;
			
			mpStateMachine.AddTimer("SearchOver", cMath_RandRectf(20, 30));
			mpStateMachine.AddTimer("PauseOver", 2);
			mpStateMachine.AddTimer("RandomWalkStart", cMath_RandRectf(2, 10));
			mpStateMachine.AddTimer("CheckHuntStart", 1.0f);
			mpStateMachine.AddTimer("CheckSpeedUpdate", 1.0f);
		}
		
		//------------------------------------------------------------
		
		void State_Search_Leave()
		{
			mbAlertMusic_Active=false;
			
			SetDefaultSoundRadiusMul();
			mpPathfinder.Stop();
			
			mpMover.SetUseMoveStateAnimations(true);
		}
		
		//------------------------------------------------------------
		
		void State_Search_Update(float afTimeStep)
		{
			mfSearch_TimeSinceLastSound += afTimeStep;
			
			mfSearch_SoundSensitivity -= afTimeStep*0.35f;
			if(mfSearch_SoundSensitivity<0) mfSearch_SoundSensitivity=0;
			
			mpSoundListener.SetSoundRadiusMul(2.0f + mfSearch_SoundSensitivity*0.5f);
			
			float fMaxDist = cLux_GetPlayer().GetHealth()>0.4 ? 1.75f : 3.0f;
			if(mBaseObj.GetDistanceToPlayer() < fMaxDist)
			{
				mpStateMachine.ChangeState(eVictimState_Idle);	
			}
		}
		
		//------------------------------------------------------------
		
		void State_Search_TimerUp(uint64 alId)
		{
			//////////////////////
			// Reset Sound Properties
			if(alId == H64("TurnTowardsOver"))
			{
				mlSearch_SoundPrio = -100;
				mpPathfinder.Stop();
			}
			//////////////////////////////
			// Check Speed Update
			if(alId == H64("CheckSpeedUpdate"))
			{
				if(	mBaseObj.GetDistanceToPlayer() > 10 ||
					(mbIsAkers==false && mBaseObj.GetDistanceToPlayer()>5 ))
				{
					mpMover.SetSpeedState(eVictimSpeed_FastWalk);
				}
				else
				{
					mpMover.SetSpeedState(eVictimSpeed_Walk);
				}
				
				mpStateMachine.AddTimer("CheckSpeedUpdate", 1.0f);
			}
			//////////////////////
			// Search Over
			if(alId == H64("SearchOver"))
			{
				mpStateMachine.ChangeState(eVictimState_Idle);
			}
			//////////////////////
			// Search Over
			if(alId == H64("PauseOver"))
			{
				mbSearch_PauseAtStart=false;
			}
			//////////////////////
			// Check Hunt Start
			if(alId == H64("CheckHuntStart"))
			{
				float fDist = mBaseObj.GetDistanceToPlayer();
				float fSpeed = cLux_GetPlayer().GetAverageMoveSpeed();
				
				bool bRequireMovement = GameOver_GetTimeSinceLastGameOver() < 60*5 || 
										cLux_GetPlayer().GetHealth() < 0.465f;
			
				if(	mBaseObj.PlayerIsDetected() && 
					(bRequireMovement==false || fSpeed>0.9f))
				{
					if(	fDist < mfMinStartHuntDistance*0.8f ||
						(fDist < 9 && fSpeed> 1.95f) ||
						(fDist < 16 && fSpeed> 5.1f) ||
						(fDist < 5.5f && fSpeed>1.6f) ||
						(fDist < 4.0f && fSpeed>1.1f))
					{
						if (cLux_GetExplorationModeActive() == false)
						{
							mpStateMachine.ChangeState(eVictimState_Hunt);
						}						
					}
				}
				
				mpStateMachine.AddTimer("CheckHuntStart", 1.0f);
			}
			//////////////////////
			// RandomWalkStart
			if(alId == H64("RandomWalkStart"))
			{
				if(mbSearch_WalkingTowardsSound==false)
				{
					float fDist = mBaseObj.GetDistanceToPlayer();
					float fMaxDist = cMath_Max(fDist*0.5f, 7.0f);
					
					cAINode @pNode = mpPathfinder.GetNodeAtPos(mBaseObj.GetPlayerFeetPos(), 5, fMaxDist, false, false, false, null);
					if(pNode !is null)
					{
						mpPathfinder.MoveTo(pNode.GetPosition(), 1, false);
					}
					
					if(mbIsAkers)
						mpStateMachine.AddTimer("RandomWalkStop", cMath_RandRectf(2, 4));
					else
						mpStateMachine.AddTimer("RandomWalkStop", cMath_RandRectf(2, 5));
				}
				else
				{
					mpStateMachine.AddTimer("RandomWalkStart", cMath_RandRectf(2, 10));
				}
			}
			//////////////////////
			// RandomWalkEnd
			if(alId == H64("RandomWalkStop"))
			{
				if(mfNearPlayerCount>60.0f)
				{
					mpStateMachine.ChangeState(eVictimState_Idle);
				}
				
				if(mbSearch_WalkingTowardsSound==false)
					mpPathfinder.Stop();
				
				if(mbIsAkers)
					mpStateMachine.AddTimer("RandomWalkStart", cMath_RandRectf(2, 10));
				else
					mpStateMachine.AddTimer("RandomWalkStart", cMath_RandRectf(2, 5));
			}
		}
		
		//------------------------------------------------------------
		
		bool State_Search_Message(int alMessageId)
		{
			//////////////////////////////////////
			// End of Path
			if(alMessageId == eLuxEntityMessage_EndOfPath)
			{
				mlSearch_SoundPrio=-100;
				mbSearch_WalkingTowardsSound=false;
				
				return true;
			}
			//////////////////////
			// Sound heard
			else if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				if(mbSearch_PauseAtStart) return  true;
				
				int lPrio = mpStateMachine.GetCurrentMessageData().mlX;
				cVector3f vPos = mpStateMachine.GetCurrentMessageData().mvX;
				
				////////////////////////////////
				// Sound is more important than current
				if(mlSearch_SoundPrio < lPrio)
				{
					mfSearch_SoundSensitivity = cMath_IncreaseTo(mfSearch_SoundSensitivity, 1.0f, 3.0f);
					
					mvSearch_SoundPos = vPos;
					mlSearch_SoundPrio = lPrio;
					
					if(	mfSearch_TimeSinceLastSound>3.0f || 
						mBaseObj.GetDistanceToPlayer()>5.0f ||
						mbIsAkers==false) 
					{
						cAINode @pNode = mpPathfinder.GetNodeInPosLOS(mvSearch_SoundPos, 0, 6);
						
						if(pNode !is null)
							mpPathfinder.MoveTo(pNode.GetPosition(),1, false);
						else
							mpMover.TurnToPos(mvSearch_SoundPos);
					}
					else
					{
						mpMover.TurnToPos(mvSearch_SoundPos);
						mpStateMachine.AddTimer("TurnTowardsOver", 1.0f);
					}
					
					if(mfTimeSinceLastScream>3)
					{
						mBaseObj.PlaySound("SearchExtra",gsVictimSound_SearchExtraSound,true, true);
						mfTimeSinceLastScream = 0;
					}
					
					mfSearch_TimeSinceLastSound=0;
					mbSearch_WalkingTowardsSound=true;
					
					mpStateMachine.StopTimer("SearchOver");
					mpStateMachine.AddTimer("SearchOver", cMath_RandRectf(10, 20));
				}
				////////////////////////////////
				// Sound is of less or equal importance
				else
				{
					if(lPrio>=1 && cMath_Vector3Dist(mBaseObj.GetPlayerPos(), vPos) < 3.0f)
					{
						mfSearch_SoundSensitivity = cMath_IncreaseTo(mfSearch_SoundSensitivity, 0.5f, 3.0f);
						
						mpStateMachine.StopTimer("SearchOver");
						mpStateMachine.AddTimer("SearchOver", cMath_RandRectf(10, 20));
					}
				}
				
				return true;
			}
			
			
			return false;
		}

		//------------------------------------------------------------
		
		//} END Search
		
		///////////////////////////////////
		// STATE: Hunt
		//{////////////////////////////////
	
		//------------------------------------------------------------
		
		cVector3f mvHunt_LastKnownPostion;
		float mfHunt_SenseLastKnownPosCount;
		bool mbHunt_Ending=false;
		bool mbHunt_StartedMoving = false;
		
		//------------------------------------------------------------
		
		void Timer_AfterKnock(uint64 alId)
		{
			mpStateMachine.ChangeState(eVictimState_HideAndWait);
			cLux_AddDebugMessage("FORCE HIDE AFTER KNOCK!");
			
			Player_StopLookAt(10.f);
			
			Player_SetStandDisabled(false);			
			
			Player_FadeLookSpeedMulTo(1.f, 8.f);
			Player_FadeMoveSpeedMulTo(1.f, 8.f);
			
			cLux_GetPlayer().SetVisibilityMaxRange(eVisibilityType_Damage, -1);
			
			Sound_FadeGlobalVolume(1.00f, 9.0f, eSoundEntryType_WorldAll);
			Sound_FadeGlobalVolume(1.0f, 9.0f, eSoundEntryType_GuiWorld);
			Music_FadeVolumeMul(1.0, 9.0f);
			//Effect_ChromaticAberration_StartAnim(8, 0.04f, 3, cVector2f(1,0.3f));
		
			Emotion_StopHeartbeat(1);
			Emotion_StartBackgroundBreath(eBreathType_Fear, 0.7f, 0, 2.5f+6.0f);
			
			mBaseObj.Timer_Add("StandUpAfterKnock", 2.f, "Timer_StandUpAfterKnock");
		}
	
		//------------------------------------------------------------
		
		void Timer_StandUpAfterKnock(uint64 alId)
		{
			Player_SetCrouching(false, false, false);
		}
		
		//------------------------------------------------------------
		
		void State_Hunt_Enter()
		{
			mpBarkMachine.ChangeState(eVictimBark_Hunt);
			
			if(mfTimeSinceLastScream>2)
			{
				mBaseObj.PlaySound("SpotPlayer",gsVictimSound_SpotPlayer,true, true);
				mfTimeSinceLastScream = 0.0f;
			}
			
			mpPathfinder.Stop();
			mpMover.TurnToPos(mBaseObj.GetPlayerPos());
			mpMover.SetSpeedState(eVictimSpeed_Run);
			
			int lPrevState = mpStateMachine.GetPrevState();
			
			if(lPrevState == eVictimState_OpenDoor)
			{
				mpStateMachine.AddTimer("MoveTowardsPlayer", 0.25f);
				mpStateMachine.AddTimer("TurnOnAttackMeter", 0.35f);	
				mbHunt_StartedMoving = true;
			}
			else
			{
				mbHunt_StartedMoving = false;
			
				bool bCalmPrevState = 	lPrevState == eVictimState_Patrol || 
										lPrevState == eVictimState_Retreat ||
										lPrevState == eVictimState_Wander;
				
				float fTime = bCalmPrevState ? 2.75f : 1.75f;
				float fAttackMeterDelay = 0.3f;
				if (mbIsEndChaseVictim) fAttackMeterDelay = -1.f;
				mpStateMachine.AddTimer("MoveTowardsPlayer", fTime);
				mpStateMachine.AddTimer("TurnOnAttackMeter", fTime + fAttackMeterDelay);			
				mvHunt_LastKnownPostion = mBaseObj.GetPlayerFeetPos();
			}
			
			mpStateMachine.AddTimer("SpeedUpdate", 0.75f);
			
			mfHunt_SenseLastKnownPosCount=0.0f;
			mbHunt_Ending = false;
			
			if(lPrevState == eVictimState_Patrol || lPrevState == eVictimState_Wander)
				Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentToHuntTransition, gsVictimAmbientToHuntMusic, gfVictimAmbientToHuntVolume, 0, 1);

			else if(lPrevState == eVictimState_Investigate)
				Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentToHuntTransition, gsVictimAlertToHuntMusic, gfVictimAlertToHuntMusicVolume, 0, 1);
			
			if(mBaseObj.GetEventTag() != "NoMusic")
				Music_AddDynamicTrack(mBaseObj.GetID(), 0, eMusicPrio_AgentHunt, gsVictimHuntMusic, gfVictimHuntMusicVolume, 3, 3);
				
			mbAlertMusic_Active=true;
			
			///////////////////////////////////////
			// If normal Victim in explo, end chase after a few sec
			if (cLux_GetExplorationModeActive() == false ||
				mbIsEndChaseVictim == true ||
				mbExplorationMode_IsTunnelVictim == true) 
				return;
			mpStateMachine.AddTimer("EndHunt", 5.f);
		}	

		//------------------------------------------------------------
		
		void State_Hunt_Leave()
		{
			mbAlertMusic_Active=false;
			mfAlertMusic_FadeCount=0;
			
			mpPathfinder.Stop();
			
			AttackMeter_RemoveInstance(mBaseObj.GetID());
		}
		
		//------------------------------------------------------------
		
		void State_Hunt_Update(float afTimeStep)
		{
			if(mbHunt_Ending) return;
			
			if(mbHunt_StartedMoving==false)
			{
				mpMover.TurnToPos(mBaseObj.GetPlayerFeetPos());
			}
			
			float fDist = mBaseObj.GetDistanceToPlayer();
			float fSpeed = cLux_GetPlayer().GetAverageMoveSpeed();
			
			////////////////////////////////
			// Reveal player if running
			if( (mBaseObj.PlayerIsDetected() && ((fDist < 10 && fSpeed>2.1f) ||	fDist<5.2f))
				||
				(fSpeed > 4.0f && fDist < 15))
			{
				mfHunt_SenseLastKnownPosCount = cMath_IncreaseTo(mfHunt_SenseLastKnownPosCount, afTimeStep,1.5f);
			}
			else
			{
				mfHunt_SenseLastKnownPosCount = cMath_IncreaseTo(mfHunt_SenseLastKnownPosCount, afTimeStep,0);
			}
			
			if(mfHunt_SenseLastKnownPosCount>0)
				mvHunt_LastKnownPostion = mBaseObj.GetPlayerFeetPos();
			
			
			if (cLux_GetExplorationModeActive() == false || fDist > 1.6f ||
				mbExplorationMode_IsTunnelVictim == true) return;			

			/////////////////////////////////////////
			// Knock awawy player and dissappear if Akers
			if (mbIsAkers && mbIsEndChaseVictim == false && mfExplorationMode_KnockAwayCooldown <= 0.f)
			{
				AkersKnockAway();
				return;
			}
			//////////////////////////////////////
			// Do fake knock-out if end chase Victim
			else if (mbIsEndChaseVictim && mbExplorationMode_EndChaseVictimHasKnockedOut == false)
			{
				Effect_Shake_Start(1.55, 0.3, 0.1, 0.0, cVector3f(1, 0.8f, 0));
				Effect_Rumble_Start(3.5, 1.5, 0.1, 0.7);			
			
				Sound_FadeGlobalVolume(0.0f, 0.2f, eSoundEntryType_WorldAll);
				Sound_FadeGlobalVolume(0.0f, 0.2f, eSoundEntryType_GuiWorld);				
				Music_FadeVolumeMul(0.0, 0.2f);
			
				Sound_PlayGui("Player/UI/blackout_hit", 1.0f);
								
				Player_SetMoveSpeedMul(0.2);
				Player_SetLookSpeedMul(0.3f);
			
				Effect_Screen_Start("damage_steam_screen.mat", cVector2f(0.5, 0.5), cVector2f(1.8, 1.8), 1, 0, 0.5f, 2.0f);
				Effect_Fade_Out(0.1f);
			
				cLux_GetCurrentMap().AddTimer("FakeKnockOut", 0.5f, "Timer_ExplorationModeFakeKnockOut");
				
				mbExplorationMode_EndChaseVictimHasKnockedOut = true;
			}
		}
		
		//------------------------------------------------------------
		
		void State_Hunt_TimerUp(uint64 alId)
		{
			//////////////////////
			// Update destionation 
			if(alId == H64("MoveTowardsPlayer"))
			{
				mbHunt_StartedMoving = true;
				mpPathfinder.MoveTo(mvHunt_LastKnownPostion, 1, false);
				mpStateMachine.AddTimer("MoveTowardsPlayer",0.3f);
			}
			//////////////////////
			// Turn on attack meter
			else if(alId == H64("TurnOnAttackMeter"))
			{
				if (cLux_GetExplorationModeActive() && mbExplorationMode_IsTunnelVictim == false && 
					 (mbIsAkers || mbIsEndChaseVictim) ||
					mbIsAkers && Map_TimerExists("DisallowAkersAttackMeter") == true)
					return;
				
				float fDamage = 0.45;
				if(	AttackMeter_GetTimeSinceLastKnockDown() > 90 &&
					GameOver_GetTimeSinceLastGameOver() > 60 * 20)
				{
					if(cMath_RandRectl(0,2)==0 || AttackMeter_GetTimeSinceLastKnockDown() > 60 * 60)
					{
						fDamage = cLux_GetPlayer().GetHealth()*0.9f;
					}
					else
					{
						fDamage = 0.65f;
					}
				}
			
				AttackMeter_AddInstance(mBaseObj.GetID(), 7.5f, 2.1f, fDamage, mbAttackFatal, mbFastNonLookKill);
				cLux_AddDebugMessage("Attack meter active!");
			}
			//////////////////////
			// Move speed update
			else if(alId==H64("SpeedUpdate"))
			{
				float fDist = mBaseObj.GetDistanceToPlayer();
				float fSpeed = cLux_GetPlayer().GetAverageMoveSpeed();
				//if(fSpeed>2.4 || fDist>6.5f)
				{
					mpMover.SetSpeedState(eVictimSpeed_Run);
				}
				//else
				//{
				//	mpMover.SetSpeedState(eVictimSpeed_FastWalk);
				//}
				
				mpStateMachine.AddTimer("SpeedUpdate", 1.0f); //update move speed
			}
			//////////////////////
			// Update destionation 
			else if(alId == H64("EndHunt"))
			{	
				cLux_AddDebugMessage("ENDING HUNT!");
				mpPathfinder.Stop();
				mpStateMachine.ChangeState(eVictimState_AfterHunt);
				
				if(mfTimeSinceLastScream>3)
				{
					mBaseObj.PlaySound("LosePlayer",gsVictimSound_LosePlayer,true, true);
					mfTimeSinceLastScream = 0.0f;
				}
			}
		}

		//------------------------------------------------------------
		
		bool State_Hunt_Message(int alMessageId)
		{
			////////////////////////
			// End of Path
			if(alMessageId == eLuxEntityMessage_HitByProp)
			{
				//Override default!	
				return true;
			}
			/////////////////////////
			// End of Path
			if(alMessageId == eLuxEntityMessage_EndOfPath)
			{
				mbHunt_Ending = true;
				mpStateMachine.AddTimer("EndHunt", 1.0f); //update move speed
							
				return true;
			}
			////////////////////////
			// Sound Heard
			else if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				//Override default!	
				return true;
			}
			
			return false;
		}

		//------------------------------------------------------------
		
		//} END Hunt
		
		///////////////////////////////////
		// STATE: After Hunt
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		float mfAfterHunt_PauseTime= -1;
		
		//------------------------------------------------------------
		
		void State_AfterHunt_Enter()
		{
			float fTime = mfAfterHunt_PauseTime;
			if(fTime < 0)
				fTime = cMath_RandRectf(2, 5);
			
			if (cLux_GetExplorationModeActive() && mbIsAkers) fTime = cMath_RandRectf(1.f, 1.5f);
			mpStateMachine.AddTimer("GoToSearch", fTime);
			
			mfAfterHunt_PauseTime= -1;
		}

		//------------------------------------------------------------
		
		void State_AfterHunt_TimerUp(uint64 alId)
		{
			//////////////////////
			// Update destionation 
			if(alId == H64("GoToSearch"))
			{
				mpStateMachine.ChangeState(eVictimState_Search);
			}
		}
		
		void Start_AfterHunt_Update(float afTimeStep)
		{
			if (cLux_GetExplorationModeActive() == false || mBaseObj.GetDistanceToPlayer() > 1.8f) return;			
			/////////////////////////////////////////
			// Knock awawy player and dissappear if Akers
			if (mbIsAkers && mfExplorationMode_KnockAwayCooldown <= 0.f)
			{
				AkersKnockAway();
				return;
			}
		}
		
		//------------------------------------------------------------
		
		bool State_AfterHunt_Message(int alMessageId)
		{
			////////////////////////
			// Sound Heard
			if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				//Override default!	
				return true;
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END After Hunt
		
		
		///////////////////////////////////
		// STATE: Hunt Pause
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		float mfHuntPause_PauseTime= -1;
		int mlHuntPause_CheckBackToHuntCount=0;
		
		//------------------------------------------------------------
		
		void State_HuntPause_Enter()
		{
			float fTime = mfHuntPause_PauseTime;
			if(fTime < 0)
				fTime = cMath_RandRectf(1, 2);
			
			mpStateMachine.AddTimer("BackToHunt", fTime);
			
			mfHuntPause_PauseTime= -1;
			mlHuntPause_CheckBackToHuntCount=0;
		}

		//------------------------------------------------------------
		
		void State_HuntPause_TimerUp(uint64 alId)
		{
			//////////////////////
			// Update destionation 
			if(alId == H64("BackToHunt"))
			{
				mlHuntPause_CheckBackToHuntCount++;
				if(	mlHuntPause_CheckBackToHuntCount==1 &&
					mBaseObj.GetEntityIsInPlayerFOV()==false)
				{
					cLux_AddDebugMessage("Given extra time!");
					mpStateMachine.AddTimer("BackToHunt", cMath_RandRectf(2, 3));					
					return;
				}
				
				if(	cLux_GetPlayer().GetAverageMoveSpeed()>2.5 ||
					mBaseObj.PlayerIsDetected())
					mpStateMachine.ChangeState(eVictimState_Hunt);
				else
					mpStateMachine.ChangeState(eVictimState_Search);
			}
		}
		//------------------------------------------------------------
		
		bool State_HuntPause_Message(int alMessageId)
		{
			////////////////////////
			// Sound Heard
			if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				//Override default!	
				return true;
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END After Hunt
		
		///////////////////////////////////
		// STATE: Open Door
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		bool mbOpenDoor_TrackWasPaused=false;
		
		//------------------------------------------------------------
		
		void State_OpenDoor_Enter()
		{
			mbOpenDoor_TrackWasPaused = mpPathfinder.GetTrackPaused();
			if(mpPathfinder.GetTrackActive() && mbOpenDoor_TrackWasPaused==false)
				mpPathfinder.SetTrackPaused(true);
				
			mpPathfinder.Stop();
			
			mpStateMachine.AddTimer(0, 2);
		}
		
		//------------------------------------------------------------
		
		void State_OpenDoor_Leave()
		{
			if(mpPathfinder.GetTrackActive() && mbOpenDoor_TrackWasPaused==false)
				mpPathfinder.SetTrackPaused(false);
		}
		
		
		//------------------------------------------------------------
		
		void State_OpenDoor_TimerUp(uint64 alId)
		{
			if(alId == 0)
			{
				mpStateMachine.ChangeState(mpStateMachine.GetPrevState());	
			}
		}
		
		//------------------------------------------------------------
		
		bool State_OpenDoor_Message(int alMessageId)
		{
			////////////////////////
			// Near door
			if(alMessageId==eLuxEntityMessage_NearDoor)
			{
				return true;
			}
			////////////////////////
			// Sound Heard
			else if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				if(mpStateMachine.GetPrevState() == eVictimState_Hunt)
					return true;
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END STATE Open Door
	
		///////////////////////////////////
		// STATE: Retreat
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		cVector3f mvRetreat_Position;
		float mfRetreat_InsideRepelAreaCount=0;
		
		//------------------------------------------------------------
		
		void State_Retreat_Enter()
		{
			mpMover.SetSpeedState(eVictimSpeed_Walk);
			mpBarkMachine.ChangeState(eVictimBark_Idle);
			
			mpPathfinder.MoveTo(mvRetreat_Position, 1, false);
			
			mfRetreat_InsideRepelAreaCount = 0.5f;
			
			int lPrevState = mpStateMachine.GetPrevState();
			
			if(lPrevState == eVictimState_Hunt ||
				lPrevState == eVictimState_AfterHunt ||
				lPrevState == eVictimState_HuntPause ||
				lPrevState == eVictimState_Search
			)
			{
				Music_RemoveDynamicTrack(mBaseObj.GetID());
			}
		}

		//------------------------------------------------------------
		
		void State_Retreat_Update(float afTimeStep)
		{	
			if(mfRetreat_InsideRepelAreaCount>0)
				mfRetreat_InsideRepelAreaCount -= afTimeStep;
		}
		
		//------------------------------------------------------------
		
		bool State_Retreat_Message(int alMessageId)
		{
			//////////////////////
			// Hit By Prop
			if(alMessageId == eLuxEntityMessage_HitByProp)
			{
				return mfRetreat_InsideRepelAreaCount>0;
			}
			//////////////////////
			// Sound Heard
			if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				return mfRetreat_InsideRepelAreaCount>0;
			}
			//////////////////////
			// ForceToPosition
			if(alMessageId == eLuxEntityMessage_ForceToPosition)
			{
				mfRetreat_InsideRepelAreaCount=3.0f;
				return true;
			}
			/////////////////////////
			// End of Path
			if(alMessageId == eLuxEntityMessage_EndOfPath)
			{
				mpStateMachine.ChangeState(eVictimState_Idle);
				
				return true;
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END Retreat
		
		///////////////////////////////////
		// STATE: Lift Player
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		void State_LiftPlayer_Enter()
		{
			mpPathfinder.SetTrackPaused(true);
		}
		
		void State_LiftPlayer_Leave()
		{
			mpPathfinder.SetTrackPaused(false);
		}

		//------------------------------------------------------------
		
		void State_LiftPlayer_Update(float afTimeStep)
		{	
		}
		
		//------------------------------------------------------------
		
		bool State_LiftPlayer_Message(int alMessageId)
		{
			//////////////////////
			// Player Detected
			if(alMessageId == eLuxEntityMessage_PlayerDetected)
			{
				//Override Default!!
				return true;
			}
			//////////////////////
			// Player Detected
			if(alMessageId == eLuxEntityMessage_HitByProp)
			{
				//Override Default!!
				return true;
			}
			//////////////////////
			// Sound Heard
			if(alMessageId == eLuxEntityMessage_SoundHeard)
			{
				//Override Default!!
				return true;
			}
			/////////////////////////
			// End of Path
			if(alMessageId == eLuxEntityMessage_EndOfPath)
			{
				//Override Default!!
				return true;
			}
			
			return false;
		}
		
		//------------------------------------------------------------
		
		//} END Lift Player
		
		
		///////////////////////////////////
		// STATE: Avoid Player
		//{////////////////////////////////
		
		//------------------------------------------------------------
		
		void Timer_DecreaseAgitation(uint64 alId)
		{
			if (mlExplorationMode_AgitationCount > 0)
			{
				mlExplorationMode_AgitationCount--;
				cLux_AddDebugMessage("DECREASING AGITATION!");
			}
		}
		
		//------------------------------------------------------------
		
		void State_AvoidPlayer_Enter()
		{
			cLux_AddDebugMessage("Entering AVOID!");
			
			if (mpStateMachine.GetPrevState() == eVictimState_OpenDoor && mbIsAkers)
			{
				mpMover.SetSpeedState(eVictimSpeed_FastWalk);			
				mpBarkMachine.ChangeState(eVictimBark_Search);
				
				mpStateMachine.AddTimer("DecreasePlayerChaseCount", cMath_RandRectf(10.f, 15.f));
				mpStateMachine.AddTimer("CheckIfShouldHide", 1.f);
				mpStateMachine.AddTimer("UpdateRunAwayPath", 0.5f);
				return;						
			}
			
			mpPathfinder.SetTrackPaused(true);
			mpPathfinder.Stop();
			
			mpMover.SetSpeedState(mbIsAkers ? eVictimSpeed_FastWalk : eVictimSpeed_SlowRun);			
			mpBarkMachine.ChangeState(eVictimBark_Search);
			
			mpStateMachine.AddTimer("CheckIfShouldExitAvoid", 0.5f);
			
			
			float fWanderAwayTime = cMath_RandRectf(2.5f, 4.f);
			if (mbIsAkers)
			{
				if (mBaseObj.GetVarBool("ExplorationMode_DontWanderOff"))
				{
					fWanderAwayTime = cMath_RandRectf(8.f, 12.5f);
					mBaseObj.SetVarBool("ExplorationMode_DontWanderOff", false);
				}
				else
				{
					if (mBaseObj.GetDistanceToPlayer() < 9.f) fWanderAwayTime = cMath_RandRectf(5.f, 6.5f);
					else if (mBaseObj.GetDistanceToPlayer() < 12.f) fWanderAwayTime = cMath_RandRectf(6.5f, 7.5f);
					else fWanderAwayTime = cMath_RandRectf(7.5f, 9.5f);
				}
				
				mfExplorationMode_AkersAgitationCount = 0.f;
			}
			mpStateMachine.AddTimer("WanderAway", fWanderAwayTime);	
			
			mpStateMachine.AddTimer("DecreasePlayerChaseCount", cMath_RandRectf(10.f, 15.f));
						
			if (mbIsAkers)
			{
				mpStateMachine.AddTimer("CheckIfShouldHide", 1.f);
			}
		}
		
		void State_AvoidPlayer_Leave()
		{
			mpPathfinder.SetTrackPaused(false);
			
			mfExplorationMode_PlayerMoveTowardsCount = 0.f;
			if (mpStateMachine.GetNextState() != eVictimState_OpenDoor)
			{
				mlExplorationMode_PlayerChaseCount = 0;
				if (mpStateMachine.GetNextState() != eVictimState_Idle)
				{
					mlExplorationMode_AgitationCount = 0;
				}				
			}			
			mlExplorationMode_AkersOutOfSightCount = 0;
			mfExplorationMode_IgnorePlayerCount = cMath_RandRectf(9.f, 13.f);
			mfExplorationMode_KnockAwayCooldown = 0.f;			
			mbExplorationMode_RunAwayEffectStarted = false;
			mfExplorationMode_TurnTowardPlayerCount = 0.f;
		}
		
		//------------------------------------------------------------
		
		void State_AvoidPlayer_Update(float afTimeStep)
		{
			if (mbIsAkers && mfExplorationMode_AkersAllowStopCount > 0.f)
			{
				mfExplorationMode_AkersAllowStopCount -= afTimeStep;
			}
			
			float fDist = mBaseObj.GetDistanceToPlayer();						
			if (mbIsAkers && Wander_InLineOfSight())
			{
				/////////////////////////////////////
				// Enter hunt if player has moved close enough or agitated enough
				if (fDist < 2.8f)
				{
					mfExplorationMode_AkersAgitationCount += afTimeStep;
					if (mfExplorationMode_AkersAgitationCount > 4.f)
					{
						mpStateMachine.ChangeState(eVictimState_Hunt);
						return;
					}						
				}
				else
				{
					mfExplorationMode_AkersAgitationCount = 0.f;
				}
				/////////////////////////////////////
				// Reset state if player following too close when walking away, 
				if (fDist < 6.f && mpMover.GetMoveSpeed() > 1.f && mfExplorationMode_AkersAllowStopCount <= 0.f ||
						 fDist < 10.f && 
						 mpMover.GetMoveSpeed() > 1.f && 
						 mlExplorationMode_PlayerChaseCount >= 1 && 
						 mfExplorationMode_AkersAllowStopCount <= 0.f)
				{					
					//mlExplorationMode_AgitationCount++;
					mpStateMachine.ChangeState(eVictimState_Idle);
					return;
				}
			}		
			
			////////////////////////////////
			// Look at player if not moving
			if (mpMover.GetMoveSpeed() <= 0.f)
			{
				mfExplorationMode_TurnTowardPlayerCount += afTimeStep;
				if (mfExplorationMode_TurnTowardPlayerCount < 1.5f || 
					mBaseObj.GetPlayerIsInFOV(mBaseObj.GetFOV(), mBaseObj.GetCharBody().GetForward()) == false)
				{
					mpMover.TurnToPos(mBaseObj.GetPlayerFeetPos());
				}				
			}
			
			bool bEnterHunt = false;
			
			////////////////////////////////////////////////////////
			// Player moving toward agent
			float fMinDist = mbIsAkers ? 10.f : 7.f;			
			if (mBaseObj.GetPlayerMovementTowardEntity() >= 0.2f && fDist < fMinDist)
			{				
				mfExplorationMode_PlayerMoveTowardsCount += afTimeStep;				
				if (mfExplorationMode_PlayerMoveTowardsCount < 0.75f) return;				
				mfExplorationMode_PlayerMoveTowardsCount = 0.f;
				
				////////////////////////////////////////////////////////
				// Get new tar pos if goal is close and player chasing
				if (cMath_Vector3DistSqr(mBaseObj.GetCharBody().GetFeetPosition(), mvExplorationMode_AvoidTarPos) < 4.f * 4.f)
				{
					mvExplorationMode_AvoidTarPos = AvoidPlayer_GetAvoidPos();
					cLux_AddDebugMessage("NEW TAR!");
				}				
				
				////////////////////////////////
				// Player is chasing!
				if (fDist < 2.5f || mbIsAkers)
				{
					mlExplorationMode_PlayerChaseCount++;
				}				
				if (mbIsAkers) return;
													
				/////////////////////////////////////////////////////////////
				// Player moved toward agent for too long!
				int lMaxChaseCount = 10;
				if (mlExplorationMode_PlayerChaseCount >= lMaxChaseCount)
				{
					bEnterHunt = true;		
					mlExplorationMode_PlayerChaseCount = 0;
				}
				else
				{					
					if (mpStateMachine.TimerExists("UpdateRunAwayPath") == false)
					{
						mpStateMachine.AddTimer("UpdateRunAwayPath", 0.1f);					
					}
					mpStateMachine.StopTimer("WanderAway");
				}								
			}
			else
			{
				if (mbIsAkers) mlExplorationMode_PlayerChaseCount = 0;
			}
						
			///////////////////////////////////
			// Player too close, get annoyed
			if (mbIsAkers == false && mfExplorationMode_KnockAwayCooldown <= 0.f && fDist < 1.5f)
			{
				mlExplorationMode_AgitationCount++;
				if (mlExplorationMode_AgitationCount >= 5)
				{
					bEnterHunt = true;
				}						
				mfExplorationMode_KnockAwayCooldown = 1.f;
				
				///////////////////////////////////
				// Knock away if in front!
				cVector3f vDir = cMath_Vector3Normalize(mBaseObj.GetPlayerFeetPos() - mBaseObj.GetCharBody().GetFeetPosition());
				if (cMath_Vector3Dot(mBaseObj.GetCharBody().GetForward(), vDir) < 0.f || mpMover.GetMoveSpeed() < 1.f) return;
				Player_KnockAway(vDir, 0.05f, 1.2f);
				mfExplorationMode_KnockAwayCooldown = 1.5f;	
			}
			else
			{
				if (mfExplorationMode_KnockAwayCooldown > 0.f)
				{
					mfExplorationMode_KnockAwayCooldown -= afTimeStep;
				}
			}
			
			if (bEnterHunt == false) return;
			//////////////////////////////////////
			// Enter hunt
			mpPathfinder.Stop();						
			mpStateMachine.ChangeState(eVictimState_Hunt);			
			cLux_AddDebugMessage("ENTERING HUNT!");
		}
		
		//------------------------------------------------------------
		
		void State_AvoidPlayer_TimerUp(uint64 alId)
		{			
			if (H64("CheckIfShouldExitAvoid") == alId)
			{
				if (mbIsAkers) return;
				
				/////////////////////////////////////////
				// Should exit if far away from player
				if (mBaseObj.GetDistanceToPlayer() >= 15.f ||
					mBaseObj.GetEntityIsInPlayerLineOfSight(true) == false && mBaseObj.GetDistanceToPlayer() > 8.f)
				{										
					mpStateMachine.AddTimer("ExitAvoid", cMath_RandRectf(3.f, 6.f));
					return;
				}
				mpStateMachine.AddTimer("CheckIfShouldExitAvoid", 0.5f);
			}
			else if (H64("WanderAway") == alId)
			{
				/////////////////////////////////////////
				// Attempt to walk away from player
				mvExplorationMode_AvoidTarPos = AvoidPlayer_GetAvoidPos();
				if (mBaseObj.GetDistanceToPlayer() < 3.f && mbIsAkers || mvExplorationMode_AvoidTarPos.SqrLength() <= 0)
				{
					float fWanderAwayTime = mbIsAkers ? 1.f : cMath_RandRectf(2.5f, 4.f);
					mpStateMachine.AddTimer("WanderAway", fWanderAwayTime);
					cLux_AddDebugMessage("PATH NOT CLEAR!");
					return;
				}
				
				if (mbIsAkers)
				{
					mfExplorationMode_AkersAllowStopCount = 5.f;
				}
				
				mpPathfinder.MoveTo(mvExplorationMode_AvoidTarPos, 0.1f, false);
				mpStateMachine.AddTimer("UpdateRunAwayPath", 0.5f);
				
				cLux_AddDebugMessage("WANDER AWAY FROM PLAYER!");
			}
			else if (H64("ExitAvoid") == alId)
			{
				mpStateMachine.ChangeState(eVictimState_PostInvestigate);
				cLux_AddDebugMessage("EXITING AVOID!");
			}
			else if (H64("DecreasePlayerChaseCount") == alId)
			{
				mpStateMachine.AddTimer("DecreasePlayerChaseCount", cMath_RandRectf(10.f, 15.f));				
				if (mlExplorationMode_PlayerChaseCount > 0)
				{
					mlExplorationMode_PlayerChaseCount--;
				}
			}
			else if (H64("UpdateRunAwayPath") == alId)
			{
				mpStateMachine.AddTimer("UpdateRunAwayPath", 0.2f);
				/////////////////////////////////////////
				// Get node to get get away from player				
				if (mvExplorationMode_AvoidTarPos.SqrLength() <= 0)
				{
					mvExplorationMode_AvoidTarPos = AvoidPlayer_GetAvoidPos();					
				}
				
				if (mbIsAkers && AvoidPlayer_PathClear(mvExplorationMode_AvoidTarPos) == false)
				{
					for (int i = 0; i < 10; i++)
					{
						mvExplorationMode_AvoidTarPos = AvoidPlayer_GetAvoidPos();
						if (mbIsAkers && AvoidPlayer_PathClear(mvExplorationMode_AvoidTarPos) == true) 
							break;
					}
				}
				
				if (mbIsAkers && mlExplorationMode_AkersOutOfSightCount >= 2 && mBaseObj.GetDistanceToPlayer() >= 10.f)
				{
					mpPathfinder.Stop();
					cLux_AddDebugMessage("STOPPING!");
				}
				else
				{
					mpPathfinder.MoveTo(mvExplorationMode_AvoidTarPos, 0.1f, false);	
				}

				//////////////////////////////////////
				// Scary effects if player sees it running away
				if (mbIsAkers == false && 
					mbExplorationMode_RunAwayEffectStarted == false &&
					mBaseObj.GetEntityIsInPlayerLineOfSight(true))
				{					
					//Effect_VideoDistortion_Start(0.9f, 4.f, 0.1f, 0.5f, 1.f);
					mbExplorationMode_RunAwayEffectStarted = true; 
				}
								
				mpStateMachine.StopTimer("WanderAway");
			}
			
			if (mbIsAkers == false) return;
			if (H64("CheckIfShouldHide") == alId)
			{
				///////////////////////////////////////////
				// Enter hide if out of sight long enough
				float fDist = mBaseObj.GetDistanceToPlayer();
				if (Wander_InLineOfSight() == false &&
					fDist > 8.f &&
					 (mBaseObj.GetVarBool("ExplorationMode_InHideZone") == true ||
					  mBaseObj.GetVarBool("ExplorationMode_PlayerInHideZone") == true))
				{
					mlExplorationMode_AkersOutOfSightCount++;
					
					if (mlExplorationMode_AkersOutOfSightCount >= 3)
					{
						mlExplorationMode_AkersOutOfSightCount = 0;
						mpStateMachine.ChangeState(eVictimState_HideAndWait);
						cLux_AddDebugMessage("ENTERING HIDE!");
						return;
					}					
				}
				else
				{
					mlExplorationMode_AkersOutOfSightCount = 0;
				}
				
				mpStateMachine.AddTimer("CheckIfShouldHide", 1.f);
			}
		}
		
		//------------------------------------------------------------
		
		bool State_AvoidPlayer_Message(int alMessageId)
		{
			//////////////////////
			// Player Detected
			if(alMessageId == eLuxEntityMessage_PlayerDetected)
			{
				//Override Default!!
				return true;
			}
			/////////////////////////
			// End of Path
			if(alMessageId == eLuxEntityMessage_EndOfPath)
			{
				if (mbIsAkers)
				{
					if (Wander_InLineOfSight() == false &&
						(mBaseObj.GetVarBool("ExplorationMode_InHideZone") == true ||
						 mBaseObj.GetVarBool("ExplorationMode_PlayerInHideZone") == true)) 
						return true;					
					
					mvExplorationMode_AvoidTarPos = AvoidPlayer_GetAvoidPos();
					if (mvExplorationMode_AvoidTarPos.SqrLength() <= 0)
					{
						mpStateMachine.ChangeState(eVictimState_Idle);
						cLux_AddDebugMessage("END OF PATH! COULDN'T GET AVOID POS!");
					}
					else
					{
						cLux_AddDebugMessage("FIND NEW TAR!");
						mpPathfinder.MoveTo(mvExplorationMode_AvoidTarPos, 0.1f, false);
					}
					return true;
				}
				
				mpStateMachine.ChangeState(eVictimState_Idle);
				cLux_AddDebugMessage("END OF PATH!");
				//Override Default!!
				return true;
			}
			
			return false;
		}
		
		cVector3f AvoidPlayer_GetAvoidPos()
		{
			/////////////////////////////////////////
			// Get akers avoid pos
			if (mbIsAkers)
			{
				if (mvExplorationMode_AvoidNodes.size() == 0) return cVector3f(0.f);
				
				tString sNodeName = mvExplorationMode_AvoidNodes[cMath_RandRectl(0, mvExplorationMode_AvoidNodes.length() - 1)];						
				cAINode@ pNode = mpPathfinder.GetNodeFromName(sNodeName);
				if (pNode is null || 
					cMath_Vector3DistSqr(mBaseObj.GetCharBody().GetFeetPosition(), pNode.GetPosition()) < 10.f * 10.f ||
					AvoidPlayer_PathClear(pNode.GetPosition()) == false)
				{
					sNodeName = mvExplorationMode_AvoidNodes[cMath_RandRectl(0, mvExplorationMode_AvoidNodes.length() - 1)];
					@pNode = mpPathfinder.GetNodeFromName(sNodeName);
				}				
				return pNode is null ? cVector3f_Zero : pNode.GetPosition();
			}
			
			
			/////////////////////////////////////////
			// Normal Victim avoid pos
			cVector3f vFeetPos = mBaseObj.GetCharBody().GetFeetPosition();			
			float fMinDist = 5.f;
			float fMaxDist = 9.f;		
			
			cAINode@ pNode = mpPathfinder.GetNodeAtPos(vFeetPos, fMinDist, fMaxDist, false, false, false, null);			
			if (pNode is null)
			{				
				fMaxDist += 5.f;
				@pNode = mpPathfinder.GetNodeAtPos(vFeetPos, fMinDist, fMaxDist, false, false, false, null);
						
				if (pNode is null)
				{
					fMaxDist += 5.f;		
					@pNode = mpPathfinder.GetNodeAtPos(vFeetPos, fMinDist, fMaxDist, false, false, false, null);

					if (pNode is null)
					{
						vFeetPos = mBaseObj.GetPlayerFeetPos();
						fMaxDist = 30.f;	
						@pNode = mpPathfinder.GetNodeAtPos(vFeetPos, fMinDist, fMaxDist, false, false, false, null);							
					}
				}
				
			}
			return pNode is null ? cVector3f_Zero : pNode.GetPosition();
		}
		
		bool AvoidPlayer_PathClear(const cVector3f &in avPos)
		{
			//////////////////////////////////////////
			// Check if the player is in the way of the immediate path
			cAINode@ pNode = null;
			mpPathfinder.BuildPathNodeArrayToPos(avPos);
			int lSize = mpPathfinder.GetPathNodeArraySize() > 5 ? 5 : mpPathfinder.GetPathNodeArraySize();
			for (int i = 0; i < lSize; i++)
			{
				@pNode = mpPathfinder.GetPathNodeArrayNode(i);
				if (cMath_Vector3DistSqr(mBaseObj.GetPlayerFeetPos(), pNode.GetPosition()) < 2.f * 2.f)
				{
					cLux_AddDebugMessage("PATH LEADING THROUGH PLAYER!");
					return false;
				}
			}
			return true;
		}
		
		void _Global_ExplorationMode_SetupElevatorEvent()
		{
			if (Wander_InLineOfSight()) return;			
			iLuxEntity@ pEnt = cLux_GetCurrentMap().GetEntityByName("Victim_spawnpos_12");
			if (pEnt is null) return;
			
			cVector3f vDir = mBaseObj.GetCharBody().GetFeetPosition() - pEnt.GetPosition();
			bool bRightOfElevator = cMath_Vector3Dot(vDir, pEnt.GetMatrix().GetRight()) > 0.f;
			
			@pEnt = bRightOfElevator ? cLux_GetCurrentMap().GetEntityByName("Victim_spawnpos_15") : 
									   cLux_GetCurrentMap().GetEntityByName("Victim_spawnpos_14");
			
			if (pEnt is null) return;
			
			mpStateMachine.ChangeState(eVictimState_Idle);
			mpPathfinder.MoveTo(mBaseObj.GetLastKnownPlayerPos(), 0.1f, false);
			mBaseObj.GetCharBody().SetFeetPosition(pEnt.GetPosition(), false);
			
			cLux_AddDebugMessage("SETTING UP ELEVATOR EVENT!");
		}
		
		//------------------------------------------------------------
		
		//} END Avoid Player
	//------------------------------------------------------------
	
	//} END STATES
	
	/////////////////////////////////////////
	// PLAYER DEATH
	//{//////////////////////////////////////
		
	//------------------------------------------------------------
	
	tString msPlayerDeath_AfterAnimCallback="";
	
	void _Global_SetAfterPlayerDeathAnimtionCallback()
	{
		msPlayerDeath_AfterAnimCallback = cScript_GetGlobalArgString(0);
	}
	
	void _Global_StartPlayerDeathAnimation()
	{
		mpPathfinder.Stop();
		
		mBaseObj.SetSensesActive(false);
		mpStateMachine.ChangeState(eVictimState_LiftPlayer);
		mpBarkMachine.ChangeState(eVictimBark_Silent);
		
		Effect_Fade_In(0.5);
		
		cLux_GetPlayer().GetCharacterBody().SetCameraUpdateActive(false);
		mbAttachPlayerCamera = true;
		mpMover.PlayAnimation("pick_up_player", 0);

		mBaseObj.Timer_Add("LiftPlayer_Step1", 3.2f, "Timer_LiftPlayer_Step1");

		cLux_AddTodoMessage("Sound: Victim lifts up player");
		
		Sound_CreateAtEntity("AkersKillPlayer", "NPC_Creatures/Foley/InWorld/CoralPuppet_01/kill_player", "Player");
		//Sound_PlayGui("NPC_Creatures/Foley/InWorld/Deepsea_Diver/kill_anim", 1.0f, eSoundEntryType_Gui);
		//Music_FadeVolumeMul(0, 0.1f);

		//Effect_VideoDistortion_Start(1, 3.5f, 0.1, 0.3f, 1.0f);
		Effect_ImageTrail_Start(0.7f, 0.1, 3.5, 0.1f);
	}
	
	//------------------------------------------------------------
		
	void _Global_PlayerStartDamageCallback()
	{
		mpPathfinder.Stop();
		AttackMeter_RemoveInstance(mBaseObj.GetID());
		
		mlNumOfKnockDowns++;
	}
	
	//------------------------------------------------------------
	
	void _Global_PlayerAfterDamageCallback()
	{
		bool bKnockedOut = cScript_GetGlobalArgBool(0);
			
		if(bKnockedOut)
		{
			Music_RemoveDynamicTrack(mBaseObj.GetID());
			mbAlertMusic_Active=false;
			mfAlertMusic_FadeCount=0;
	
			if(mpPathfinder.GetTrackNodeNum()>0)
			{
				mpStateMachine.ChangeState(eVictimState_AfterKnockDown);
			}
			else	
				mpStateMachine.ChangeState(eVictimState_HideAndWait);
		}
		else
		{
			mfHuntPause_PauseTime = cMath_RandRectf(2.0f, 4.0f);
			mpStateMachine.ChangeState(eVictimState_HuntPause);
		}
	}
	
	//------------------------------------------------------------
	
	void Timer_LiftPlayer_Step1(uint64 alId)
	{
		Effect_Fade_Out(0.015f);
		Sound_Stop("AkersKillPlayer", 0.25f);
		Music_StopAll(0.015f);
		Sound_PlayGui("Player/UI/death_hit", 1.0f, eSoundEntryType_Gui);
		mBaseObj.Timer_Add("LiftPlayer_Step2", 0.1f, "Timer_LiftPlayer_Step2");
	}
	
	//------------------------------------------------------------
	
	void Timer_LiftPlayer_Step2(uint64 alId)
	{
		Music_FadeVolumeMul(1, 2);
		mbAttachPlayerCamera=false;
		mBaseObj.SetSensesActive(true);
		cLux_GetPlayer().GetCharacterBody().SetCameraUpdateActive(true);
		AttackMeter_ContinueAttackDamageSequence();
		
		if(mpPathfinder.GetTrackNodeNum()>0)
			mpStateMachine.ChangeState(eVictimState_Idle);
		else	
			mpStateMachine.ChangeState(eVictimState_HideAndWait);
			
		if(msPlayerDeath_AfterAnimCallback != "")
		{
			cLuxMap@ pMap = mBaseObj.GetMap();
			
			if(pMap.ScriptPrepare("void "+msPlayerDeath_AfterAnimCallback+"()"))
			{
				pMap.ScriptExecute();
			}
		}
	}
	
	//------------------------------------------------------------
	
	void UpdateAttachPlayerCamera(float afTimeStep)
	{
		if(mbAttachPlayerCamera==false) return;
		
		cNode3D @pNode = mBaseObj.GetMeshEntity().GetSocket("LiftPlayerCamera");
		if(pNode is null) return;
		
		cCamera @pCam = cLux_GetPlayer().GetCamera();
		
		cVector3f vCamPos = pNode.GetWorldPosition();
		vCamPos.y += 0.25f;
		pCam.SetPosition(vCamPos);
		
		cVector3f vLookAtPos = mBaseObj.GetCharBody().GetPosition();
		vLookAtPos.y += 1.0f;
		
		cVector3f vAngles = cMath_GetAngleFromPoints3D(vCamPos, vLookAtPos);
		cVector2f vDist; 
		vDist.x = cMath_GetAngleDistanceRad(pCam.GetPitch(),vAngles.x);
		vDist.y = cMath_GetAngleDistanceRad(pCam.GetYaw(),vAngles.y);
		
		pCam.SetPitch(pCam.GetPitch() + vDist.x);
		pCam.SetYaw(pCam.GetYaw() + vDist.y);
		pCam.SetRoll(0);
		
	}
	
	//------------------------------------------------------------
	
	//} END PLAYER DEATH
	
	/////////////////////////////////////////
	// HELPER
	//{//////////////////////////////////////
	
	bool Wander_InLineOfSight()
	{		
		if(mBaseObj.GetEntityIsInPlayerLineOfSight(false)) return true;
		if(mBaseObj.GetPlayerIsInLineOfSight()) return true;
		
		return false;
	}
	
	//------------------------------------------------------------
	
	bool Wander_Begin(const cVector3f& in avPos, float afMinDistanceFromPos, float afMinDistanceFromPlayer)
	{
		///////////////////////////////////
		//Setup properties
		iCharacterBody@ pCharBody = mBaseObj.GetCharBody();
		float fMaxDistanceFromPos = afMinDistanceFromPos + 15.0f;
		float fMaxDistanceFromPlayer = afMinDistanceFromPlayer + 20.0f;
		
		float mfMaxDistanceFromCurrentPos = 12 + mfTimeSinceLastDisappear * 0.3f;
				
		///////////////////////////////////
		//Get entities
		tString sBasePosName = AttackMeter_GetAttackerTeleportPosition();
		if(sBasePosName=="")
		{
			Error("AttackerTeleportPosition not set, could not make Victim wander state work!");
			return false;
		}
		array<iLuxEntity@> vEntities;
		mBaseObj.GetMap().GetEntityArray(sBasePosName, eLuxEntityType_Area,"", vEntities);
		if(vEntities.size()==0)
		{
			Error("Could not find any teleport postions with name '"+sBasePosName+"'! Pupper wander state will not function properly!");
			return false;
		}
		
		///////////////////////////////////
		//Get the goal postion
		if(afMinDistanceFromPos>0)
		{
			////////////////////////////////////////
			// Iterate available nodes and find the closest one
			float fMinDist = 99999.0f;
			iLuxEntity @pClosestEnt = null;
			for(int i=0; i<vEntities.size(); ++i)
			{
				iLuxEntity @pEntity = vEntities[i];
				
				float fDistSqr = cMath_Vector3DistSqr(avPos, pEntity.GetPosition());
				
				if(fDistSqr > fMaxDistanceFromPos*fMaxDistanceFromPos)
					continue;
				if(fDistSqr < afMinDistanceFromPos*afMinDistanceFromPos)
					continue;
				
				float fDist = cMath_Sqrt(fDistSqr);
				if(fMinDist > fDist)
				{
					fMinDist = fDist;
					@pClosestEnt = pEntity;
				}
			}
			
			////////////////////////////////////////
			// Set the goal position
			if(pClosestEnt !is null)
			{
				mvWander_Goal = pClosestEnt.GetPosition();
				mbWander_GoalHasBeenSet = true;
			}
			else
			{
				Error("Victim Wander could not find a goal position!");
				return false;
			}
		}
		else
		{
			mvWander_Goal = avPos;
			mbWander_GoalHasBeenSet = true;
		}
		
		///////////////////////////////////
		//Get the teleport position
		{
			cVector3f vStartFeetPos = pCharBody.GetFeetPosition();
		
			////////////////////////////////////////
			// Iterate available nodes and find the closest one
			float fMinDist = 99999.0f;
			iLuxEntity @pClosestEnt = null;
			for(int i=0; i<vEntities.size(); ++i)
			{
				iLuxEntity @pEntity = vEntities[i];
				
				///////////////////////////////
				// Within min and max?
				float fDistSqr = cMath_Vector3DistSqr(mBaseObj.GetPlayerPos(), pEntity.GetPosition());
				if(fDistSqr > fMaxDistanceFromPlayer*fMaxDistanceFromPlayer)
					continue;
				if(fDistSqr < afMinDistanceFromPlayer*afMinDistanceFromPlayer)
					continue;
				
				///////////////////////////////
				// Distance 
				float fDist = cMath_Sqrt(fDistSqr);
				if(fMinDist < fDist)
					continue;
				
				///////////////////////////////
				// Close enough to last position
				fDistSqr = cMath_Vector3DistSqr(mvLastDisappearPosition, pEntity.GetPosition()); 
				if(fDistSqr > mfMaxDistanceFromCurrentPos*mfMaxDistanceFromCurrentPos)
					continue;
					
				///////////////////////////////
				// Line of sight check
				pCharBody.SetFeetPosition(pEntity.GetPosition(),false);
				if(Wander_InLineOfSight()) continue;
				
				fMinDist = fDist;
				@pClosestEnt = pEntity;
			}
			
			////////////////////////////////////////
			// Set the goal position
			if(pClosestEnt !is null)
			{
				pCharBody.SetFeetPosition(pClosestEnt.GetPosition(),false);
				return true;
			}
			//////////////////////////////////////////
			// Found no postion - Do a less picky test
			else
			{
				cLux_AddDebugMessage("Victim Wander: Could not find proper postion, looking for closest non-visible.");
				//////////////////////////////////
				// Just look for nearest non-visible node
				fMinDist = 99999.0f;
				for(int i=0; i<vEntities.size(); ++i)
				{
					iLuxEntity @pEntity = vEntities[i];
					
					///////////////////////////////
					// Distance 
					float fDist = cMath_Vector3Dist(mBaseObj.GetPlayerPos(), pEntity.GetPosition());
					if(fMinDist < fDist && fDist>7.0f)
						continue;
					
					///////////////////////////////
					// Line of sight check
					pCharBody.SetFeetPosition(pEntity.GetPosition(),false);
					if(Wander_InLineOfSight()) continue;
					
					fMinDist = fDist;
					@pClosestEnt = pEntity;
				}
				
				////////////////////////////////////////
				// Set the goal position
				if(pClosestEnt !is null)
				{
					pCharBody.SetFeetPosition(pClosestEnt.GetPosition(),false);
					return true;
				}
				//////////////////////////////////////////
				// Found no postion - Skip placing the Victim.
				else
				{
					pCharBody.SetFeetPosition(vStartFeetPos, false);
					Error("Victim Wander could not find a start postion! Skipping setup.");
					return false;
				}
			}
		}
	}
	
	//------------------------------------------------------------
	
	bool Wander_GetRandomSpawnPos(const cVector3f& in avCenterPos, float afMinDistance, float afMaxDistance, bool abCheckLOS, cVector3f &out avPosition)
	{
		///////////////////////////////////
		//Setup properties
		iCharacterBody@ pCharBody = mBaseObj.GetCharBody();
		
		///////////////////////////////////
		//Get entities
		tString sBasePosName = AttackMeter_GetAttackerTeleportPosition();
		array<iLuxEntity@> vEntities;
		mBaseObj.GetMap().GetEntityArray(sBasePosName, eLuxEntityType_Area,"", vEntities);
		if(vEntities.size()==0) return false;
		
		///////////////////////////////////
		//Interate entities
		int lRandStart = cMath_RandRectl(0, vEntities.size()-1);
		for(int i=0; i<vEntities.size(); ++i)
		{
			int lIdx = (i+lRandStart) % vEntities.size();
			iLuxEntity @pEntity = vEntities[i];	

			///////////////////////////////
			// Within min and max?
			float fDistSqr = cMath_Vector3DistSqr(avCenterPos, pEntity.GetPosition());
			if(fDistSqr < afMinDistance*afMinDistance)
				continue;
			if(fDistSqr > afMaxDistance*afMaxDistance)
				continue;
				
			///////////////////////////////
			// Check Line of sight
			if(abCheckLOS)
			{
				cVector3f vFeetPos = pCharBody.GetFeetPosition();
				pCharBody.SetFeetPosition(pEntity.GetPosition(),false);
				bool bLOS = Wander_InLineOfSight();
					
				pCharBody.SetFeetPosition(vFeetPos,false);
				
				if(bLOS) continue;
			}
			
			/////////////////////////////
			// Return answer
			avPosition = pEntity.GetPosition();
			return true;
		}
		
		return false;
	}
	
	//------------------------------------------------------------
	
	void AkersKnockAway()
	{
		mfExplorationMode_KnockAwayCooldown = 3.f;
		cVector3f vDir = cMath_Vector3Normalize(mBaseObj.GetPlayerFeetPos() - mBaseObj.GetCharBody().GetFeetPosition());
		cVector3f vOffset = cMath_Vector3Cross(vDir, cVector3f_Up);
		vDir += cMath_RandRectl(1, 2) == 2 ? vOffset : vOffset * -1.f;
		vDir.Normalize();
		
		Player_KnockAway(mBaseObj.GetPlayerFeetPos() - mBaseObj.GetCharBody().GetFeetPosition(), 0.05f, 0.8f);
				
		Player_SetCrouching(true, true, true);
		Player_SetStandDisabled(true);
				
		Player_SetMoveSpeedMul(0.2f);
		Player_SetLookSpeedMul(0.3f);			
		cLux_GetPlayer().RotateCameraTowards(6.f, 2.f, 6.f, mBaseObj.GetPlayerFeetPos() + vDir * 50.f, false);

		cLux_GetPlayer().SetVisibilityMaxRange(eVisibilityType_Damage, 0);	
				
		Effect_Shake_Start(1.55, 0.3, 0.1, 0.0, cVector3f(1, 0.8f, 0));
		Effect_Rumble_Start(3.5, 1.5, 0.1, 0.7);
//		/Effect_VideoDistortion_Start(0.6f, 11.f, 0.f, 1.f);
				
		Sound_FadeGlobalVolume(0.15f, 0.5f, eSoundEntryType_WorldAll);
		Sound_FadeGlobalVolume(0.15f, 0.5f, eSoundEntryType_GuiWorld);
				
		Music_FadeVolumeMul(0.2, 0.5f);		

		Effect_Screen_Start("damage_steam_screen.mat", cVector2f(0.5, 0.5), cVector2f(1.8, 1.8), 1, 0, 0.5f, 3.0f);
		mBaseObj.Timer_Add("AfterKnockStep1", 2.f, "Timer_AfterKnock");
	}
		
	//------------------------------------------------------------
	
	//} END HELPER
	
	/////////////////////////////////////////
	// GLOBAL
	//{//////////////////////////////////////
	
	//------------------------------------------------------------
	
	void _Global_IsHunting()
	{
		cScript_SetGlobalReturnBool(mpStateMachine.GetCurrentState() == eVictimState_Hunt ? true : false);
	}
	
	//------------------------------------------------------------
	
	void _Global_AlignRotationWithEntity()
	{
		iLuxEntity @pEnt = cLux_GetCurrentMap().GetEntityByName(cScript_GetGlobalArgString(0));
		if (pEnt is null) return;
		
		cVector3f vRot = cMath_MatrixToEulerAngles(pEnt.GetMatrix().GetRotation()).Normalize();
		
		vRot.y -= cMath_ToRad(180);
		
		mpMover.TurnInstantlyToAngle(vRot.y);
	}
	
	//------------------------------------------------------------
	
	void _Global_ChangeState_Patrol()
	{
		int lState = mpStateMachine.GetCurrentState();
		
		mpStateMachine.ChangeState(eVictimState_Patrol);
	}
	
	//------------------------------------------------------------
	
	void _Global_ChangeState_Hunt()
	{
		int lState = mpStateMachine.GetCurrentState();
		
		mpStateMachine.ChangeState(eVictimState_Hunt);
	}
	
	//------------------------------------------------------------
	
	void _Global_SetAttackFatal()
	{
		mbAttackFatal = cScript_GetGlobalArgBool(0);
	}
	
	//------------------------------------------------------------
	
	void _Global_SetAgressionAmount()
	{
		mfAgressionAmount = cScript_GetGlobalArgFloat(0);
	}
	
	//------------------------------------------------------------
	
	void _Global_SetComeOutOfHidingTimeMul()
	{
		mfComeOutOfHidingTimeMul = cScript_GetGlobalArgFloat(0);
	}
	
	//------------------------------------------------------------
	
	void _Global_SetHideAndWaitPaused()
	{
		mbHideAndWaitPaused = cScript_GetGlobalArgBool(0);
	}
	
	//------------------------------------------------------------
	
	void _Global_ForceHideAndWaitAppearance()
	{
		mbHideAndWait_UseCustomGoalPosition = cScript_GetGlobalArgBool(0);
		if(mbHideAndWait_UseCustomGoalPosition)
		{
			mvHideAndWait_CustomGoalPosition = cScript_GetGlobalArgVector3f(1);
			mfHideAndWait_CustomGoalMinDist = 0.0f;
		}
				
		mfHideAndWait_AppearCount =0;
	}
	
	//------------------------------------------------------------
	
	void _Global_Hunt_RevealCurrentPlayerPos()
	{
		mfHunt_SenseLastKnownPosCount=1;
		mvHunt_LastKnownPostion = mBaseObj.GetPlayerFeetPos();	
	}
		
	//------------------------------------------------------------
	
	void _Global_IsHidingAndWaiting()
	{
		int lState = mpStateMachine.GetCurrentState();
		cScript_SetGlobalReturnBool(lState == eVictimState_HideAndWait);
	}
	
	void _Global_SetBadHearing()
	{
		mbBadHearing =cScript_GetGlobalArgBool(0);
		if(mbBadHearing==false) SetDefaultSoundRadiusMul();
	}
		
	//------------------------------------------------------------
	
	//} END GLOBAL
	
	/////////////////////////////////////////
	// INTERACT
	//{//////////////////////////////////////
	
	//------------------------------------------------------------
		
	bool CanInteract(int alType, iPhysicsBody@ apBody)
	{
		return false;
	}
	
	//------------------------------------------------------------
		
	bool OnInteract(int alType, iPhysicsBody@ apBody, const cVector3f &in avFocusPos, const tString&in asData)
	{
		return false;
	}
	
	//------------------------------------------------------------
	
	int GetInteractIconId(int alType, iPhysicsBody@ apBody)
	{
		return eCrossHairState_Default;
	}
		
	//------------------------------------------------------------
	
	//} END INTERACT
	
	
	
	/////////////////////////////////////////
	// DEBUG
	//{//////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afStartY)
	{
		afStartY = cLux_DrawDebugText("DistToPlayer: "+mBaseObj.GetDistanceToPlayer(),afStartY);
		afStartY = cLux_DrawDebugText("PlayerDetected: "+mBaseObj.PlayerIsDetected(),afStartY);
		afStartY = cLux_DrawDebugText("NumOfKnockDowns: "+mlNumOfKnockDowns,afStartY);
		afStartY = cLux_DrawDebugText("NearPlayerCount: "+mfNearPlayerCount,afStartY);
		afStartY = cLux_DrawDebugText("PlayerRunCount: "+mfPlayerRunCount,afStartY);
		afStartY = cLux_DrawDebugText("TimeSinceLastDisappear: "+mfTimeSinceLastDisappear,afStartY);
		afStartY = cLux_DrawDebugText("MovingHome: "+mbWander_MovingHome,afStartY);
		afStartY = cLux_DrawDebugText("AppearCount: "+mfHideAndWait_AppearCount,afStartY);
		afStartY = cLux_DrawDebugText("ComeOutOfHidingTimeMul: "+mfComeOutOfHidingTimeMul,afStartY);
		afStartY = cLux_DrawDebugText("Music_FadeCount: "+mfAlertMusic_FadeCount,afStartY);
		afStartY = cLux_DrawDebugText("Speed: "+mBaseObj.GetCharBody().GetVelocity(1.0f/60.0f).Length(),afStartY);
		afStartY = cLux_DrawDebugText("HeightenedAwarenessCount: "+mfHeightenedAwarenessCount,afStartY);
		afStartY = cLux_DrawDebugText("SoundRadiusMul: "+mpSoundListener.GetSoundRadiusMul(),afStartY);
		afStartY = cLux_DrawDebugText("AgressionAmount: "+mfAgressionAmount,afStartY);
		afStartY = cLux_DrawDebugText("BadHearing: "+mbBadHearing,afStartY);
		
		/*afStartY = cLux_DrawDebugText("SoundSensitivity: "+mfSearch_SoundSensitivity,afStartY);
		//afStartY = cLux_DrawDebugText("TimeSinceLastSound: "+mfSearch_TimeSinceLastSound,afStartY);
		afStartY = cLux_DrawDebugText("GetSoundRadiusMul: "+mpSoundListener.GetSoundRadiusMul(),afStartY);
		afStartY = cLux_DrawDebugText("EnterSearchCount: "+mfInvestigate_EnterSearchCount,afStartY);
		afStartY = cLux_DrawDebugText("SearchAroundPlayerCount: "+mfWander_SearchAroundPlayerCount,afStartY);
		afStartY = cLux_DrawDebugText("ReachedGoal: "+mbWander_ReachedGoal,afStartY);
		afStartY = cLux_DrawDebugText("HasHeightenedAwareness: "+mbHasHeightenedAwareness,afStartY);
		afStartY = cLux_DrawDebugText("HeightenedAwarenessCount: "+mfHeightenedAwarenessCount,afStartY);
		afStartY = cLux_DrawDebugText("TalkCount: "+mfTalkCount,afStartY);
		afStartY = cLux_DrawDebugText("AgressionAmount: "+mfAgressionAmount,afStartY);
		afStartY = cLux_DrawDebugText("ComeOutOfHidingTimeMul: "+mfComeOutOfHidingTimeMul,afStartY);
		afStartY = cLux_DrawDebugText("CurrentNode: "+mpPathfinder.GetCurrentTrackNode(),afStartY);*/
		
		if (cLux_GetExplorationModeActive())
		{
			afStartY = cLux_DrawDebugText("ExplorationMode_PlayerMoveToward: " + mBaseObj.GetPlayerMovementTowardEntity(), afStartY);
			afStartY = cLux_DrawDebugText("ExplorationMode_IgnorePlayerCount: " + mfExplorationMode_IgnorePlayerCount, afStartY);
			afStartY = cLux_DrawDebugText("ExplorationMode_PlayerChaseCount: " + mlExplorationMode_PlayerChaseCount, afStartY);
			
			if (mbIsAkers)
			{
				afStartY = cLux_DrawDebugText("ExplorationMode_OutOfSightCount: " + mlExplorationMode_AkersOutOfSightCount, afStartY);
				afStartY = cLux_DrawDebugText("ExplorationMode_AkersAllowStopCount: " + mfExplorationMode_AkersAllowStopCount, afStartY);
				afStartY = cLux_DrawDebugText("ExplorationMode_InHideZone: " + mBaseObj.GetVarBool("ExplorationMode_InHideZone"), afStartY);
				afStartY = cLux_DrawDebugText("ExplorationMode_PlayerInHideZone: " + mBaseObj.GetVarBool("ExplorationMode_PlayerInHideZone"), afStartY);	
				afStartY = cLux_DrawDebugText("ExplorationMode_AkersAgitationCount: " + mfExplorationMode_AkersAgitationCount, afStartY);			
			}
			
			afStartY = cLux_DrawDebugText("ExplorationMode_AgitationCount: " + mlExplorationMode_AgitationCount, afStartY);
			afStartY = cLux_DrawDebugText("ExplorationMode_KnockAwayCooldown: " + mfExplorationMode_KnockAwayCooldown, afStartY);
		}				
		
		return afStartY;
	}
	
	void OnRenderSolid(cRendererCallbackFunctions@ apFunctions)
	{
		apFunctions.GetLowLevelGfx().DrawSphere(mvWander_Goal, 0.3, cColor(1,0,1,1));
		
		apFunctions.GetLowLevelGfx().DrawSphere(mvInvestigate_NodePos, 0.3, cColor(1,1,0,1));
	}
	
	//------------------------------------------------------------
	
	//} END DEBUG
	
	/////////////////////////////////////////
	// PROPERTIES
	//{//////////////////////////////////////
	
	//------------------------------------------------------------
	
	cLuxStateMachine@ mpStateMachine;
	cLuxSoundListener@ mpSoundListener;
	cLuxBarkMachine@ mpBarkMachine;
	
	//------------------------------------------------------------
	
	bool mbIsAkers;
	
	bool mbWasJustActivated=true;
	
	bool mbFastNonLookKill = true;
	bool mbAttackFatal = true;
	bool mbAttackInstantKnockDown=false;
	
	float mfTalkCount=100;
	
	bool mbBadHearing=false;
	
	float mfMinStartHuntDistance=3.5f;
	float mfHeightenedAwarenessCount=0;
	bool mbHasHeightenedAwareness=false;
	
	float mfAgressionAmount=0;
	float mfComeOutOfHidingTimeMul=1.0f;
	bool mbHideAndWaitPaused=false;
	
	float mfLookAtDistortionCount=0;
	int mlLookAtDistortionCount=0;
	
	float mfTimeSinceLastScream=100;
	
	bool mbAttachPlayerCamera=false;
		
	float mfCheckHuntCount=0;
	
	float mfPlayerRunCount=0;
	
	bool mbAlertMusic_Active=false;
	float mfAlertMusic_FadeCount=0;
	
	int mlNumOfKnockDowns=0;
	
	float mfNearPlayerCount=0;
	
	float mfTimeSinceLastDisappear=0;
	
	cVector3f mvLastDisappearPosition;
	
	tString msTalk_WanderSubject;
	tString msTalk_HideAndWaitSubject;
	
	bool mbIsEndChaseVictim = false;
	
	float mfExplorationMode_PlayerMoveTowardsCount = 0.f;
	float mfExplorationMode_IgnorePlayerCount = 0.f;
	float mfExplorationMode_KnockAwayCooldown = 0.f;
	float mfExplorationMode_EnterAvoidCount = 0.f;
	float mfExplorationMode_TurnTowardPlayerCount = 0.f;
	float mfExplorationMode_AkersAllowStopCount = 0.f;
	float mfExplorationMode_AkersAgitationCount = 0.f;
	int mlExplorationMode_PlayerChaseCount = 0;
	int mlExplorationMode_AkersOutOfSightCount = 0;
	int mlExplorationMode_AgitationCount = 0;	
	bool mbExplorationMode_RunAwayEffectStarted = false;
	bool mbExplorationMode_IsTunnelVictim = false;
	bool mbExplorationMode_EndChaseVictimHasKnockedOut = false;
	
	cVector3f mvExplorationMode_AvoidTarPos = cVector3f_Zero;
	
	array<tString> mvExplorationMode_AvoidNodes;
	
	//------------------------------------------------------------
	
	//} END PROPERTIRES
		
}	