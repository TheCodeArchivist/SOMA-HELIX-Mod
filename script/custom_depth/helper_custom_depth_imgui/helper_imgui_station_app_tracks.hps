
	
//-------------------------------------------------------

/////////////////////////////////////////
// STATION DOOR LOCK APP
//{///////////////////////////////////////

//-------------------------------------------------------

enum eStationGui_TrackSelectorAppButtonType
{
	eStationGui_TrackSelectorAppButtonType_Button,
	eStationGui_TrackSelectorAppButtonType_MovingButton,
}

//-------------------------------------------------------

class cStationGui_TrackSelectorAppSettings
{
	int mlMinLockedCount = 0;
	float mfSizeMul = 1;
	cVector3f mvPosOffset = 0;
	cImGuiGfx mMapBackground;
}

//-------------------------------------------------------

class cTrackSelectorAppButton
{
	cTrackSelectorAppButton(){}
	
	cTrackSelectorAppButton(const tString &in asName)
	{
		msName = asName;
	}
	
	tString msName;
	tString msFocusText;
	cVector3f mvNrmPos;
	cVector2f mvNrmSize = cVector2f(0.175, 0.20);
	eStationGui_TrackSelectorAppButtonType mButtonType = eStationGui_TrackSelectorAppButtonType_Button;
	tString msCustomClickCallback = "";
	
	cVector2f mvUIPosExpandNeg = cVector2f_Zero;
	cVector2f mvUIPosExpandPos = cVector2f_Zero;
	
	cImGuiGfx mPreviewImage;
	cImGuiGfx mGfx;
	
	array<tString> mvPanels;
}

array<cTrackSelectorAppButton> gvTrackControlPanels;

//-------------------------------------------------------
	
void StationGui_TrackSelectorApp(const cStationGui_TrackSelectorAppSettings &in aSettings = cStationGui_TrackSelectorAppSettings())
{	
	///////////
	// Data
	cImGuiLabelData label = ImGui_GetDefaultLabel();
	label.mFontAlign = eFontAlign_Left;
	label.mFont.SetFile("sansation_large.fnt");
	label.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.04);
	
	cImGuiButtonData button = StationGui_CreateToggleButtonData();
	button.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.0375);
	button.mColorBase = gStationGuiColor_Warning;
	button.mColorTriggered = gStationGuiColor_Normal; 
	ImGui_SetDefaultButton(button);
	
	cImGuiTextFrameData text = StationGui_CreateDefaultTextFrameData();
	text.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.04);
	
	////////////////
	// Setup
	tString sPrevLang = ImGui_GetTransCategory();
	ImGui_SetTransCategory("StationGUI");
	
	ImGui_SetStateInt("TrackSelectorApp_FocusIndex", -1);
	
/*	if (ImGui_GetStateBool("LimitAlertActive", false) && ImGui_TimerExists("StopLimitAlert")==false)
	{
		ImGui_SetStateBool("LimitAlertActive", false);
	}*/
	
	////////////////
	// Map window
	ImGui_DoWindowStart("TrackControlApp_Label", StationGui_CreateDefaultWindowData(), ImGui_NrmPos(cVector3f(0.02, 0.02, 1)), ImGui_NrmSize(cVector2f(0.648, 0.775)));
	ImGui_SetTransCategory(sPrevLang);
	
	ImGui_SetAlignment(eImGuiAlign_CenterCenter);
	
	cVector2f vMapSize = ImGui_GetRatioCorrectSizeByRect(aSettings.mMapBackground, ImGui_NrmSizeGroup(1, 1));
	ImGui_GroupBegin(ImGui_NrmPosGroup(cVector3f(0, 0, 1)+aSettings.mvPosOffset), vMapSize*aSettings.mfSizeMul);
	
	ImGui_DoImage(aSettings.mMapBackground, ImGui_NrmPosGroup(0.5, 0.5, 0.25), ImGui_NrmSizeGroup(1));
	
	////////////////////////
	// Iterate buttons
	int lLockedRoomCount = 0;
	bool bFocusSelected = false;
	for (uint i = 0; i < gvTrackControlPanels.length(); i++)
	{
		bool bSelected = StationGui_TrackSelectorApp_Panel(gvTrackControlPanels[i], i, aSettings);
		if (bSelected)
		{
			if (ImGui_GetStateInt("TrackSelectorApp_FocusIndex", -1)==i)
				bFocusSelected = true;
			lLockedRoomCount++;
		}
	}
	ImGui_SetStateInt("SelectedTrackCount", lLockedRoomCount);
	ImGui_SetAlignment(eImGuiAlign_TopLeft);
	
	ImGui_GroupEnd();
	ImGui_DoWindowEnd();
	
	/////////////////////////////////////
	// Room info text
	ImGui_SetTransCategory("StationGUI");
	ImGui_DoWindowStart("DoorControlApp_RoomInfoHeader", StationGui_CreateDefaultWindowData(), 
						ImGui_NrmPos(cVector3f(0.68, 0.02, 1)), ImGui_NrmSize(cVector2f(0.3, 0.5)));
		int lFousIndex = ImGui_GetStateInt("TrackSelectorApp_FocusIndex", -1);
		if (lFousIndex != -1)
		{
			ImGui_SetTransCategory(sPrevLang);
			ImGui_DoTextFrameExt(gvTrackControlPanels[lFousIndex].msFocusText, ImGui_NrmSizeGroup(0.125, 0.02), 0, 0, text, 0, ImGui_NrmSizeGroup(1, 1));
			ImGui_SetTransCategory("StationGUI");
			
			cImGuiGfx gfx = gvTrackControlPanels[lFousIndex].mPreviewImage;
			cVector2f vPhotoSize = ImGui_GetRatioCorrectSizeByRect(gfx, ImGui_NrmSizeGroup(1, 0.59));
			ImGui_DoImage(gfx, ImGui_NrmPosGroup(0.225, 0.215, 1), vPhotoSize);
			
			label.mFontAlign = eFontAlign_Center;
			tString sEntry = bFocusSelected ? "TrackControlApp_Selected" : "TrackControlApp_Unselected";
			cVector2f vFontSize = label.mFont.mvSize;
			ImGui_ResizeFontToFit(sEntry, label.mFont, ImGui_GetCurrentGroupSize().x*0.9, 1.5);
			
			ImGui_SetModColorMul(bFocusSelected ? gStationGuiColor_Warning : gStationGuiColor_Highlight2);
			ImGui_DoLabelExt(sEntry, label, ImGui_NrmPosGroup(0, 0.825, 1), ImGui_NrmSizeGroup(1, -1), 1.5);
			ImGui_SetModColorMul(cColor_White);
			label.mFontAlign = eFontAlign_Left;
			
			label.mFont.mvSize = vFontSize;
		}
	ImGui_DoWindowEnd();
	
/*	/////////////////////////////////////
	// Display power limit warning
	if (aSettings.mlMinLockedCount > 0)
	{
		bool bLimitAlertActive = ImGui_GetStateBool("LimitAlertActive", false);
		ImGui_SetTransCategory("StationGUI");
		
		// Blinking text color
		cColor limitStatusCol = gStationGuiColor_Warning;
		limitStatusCol = limitStatusCol * ImGui_FadeOscillateFloat("PowerLevelWarning", 
																   bLimitAlertActive ? 0.8 : 1,
																   bLimitAlertActive ? 0.4 : 0.65, 
																   bLimitAlertActive ? 0.3 : 1);
		limitStatusCol.a = 1;
		
		ImGui_SetModColorMul(limitStatusCol);
		ImGui_ResizeFontToFit("DoorControlApp_PowerLevelHeader", label.mFont, ImGui_GetCurrentGroupSize().x*0.75);
		ImGui_DoLabelExt("DoorControlApp_PowerLevelHeader", label, ImGui_NrmPosGroup(0.1, 0.806, 1), -1, 1);
		
		float fRemainingPower = (lLockedRoomCount-aSettings.mlMinLockedCount)/float(gvTrackControlPanels.length()-aSettings.mlMinLockedCount);
		tWString sRemainingPower = ImGui_Translate("DoorControlApp_PowerLevel_Pre") + " " +int(fRemainingPower*100)+ImGui_Translate("DoorControlApp_PowerLevel_Post");
		ImGui_SetTextOverride(sRemainingPower);
		ImGui_DoLabelExt("", label, ImGui_NrmPosGroup(0.1, 0.85, 1), -1, 1);
		ImGui_ClearTextOverride();
		
		ImGui_SetModColorMul(cColor_White);
		ImGui_SetTransCategory(sPrevLang);
	}*/
	
	gvTrackControlPanels.resize(0);
}
		
//-------------------------------------------------------

bool StationGui_TrackSelectorApp_Panel(const cTrackSelectorAppButton &in aPanel, int aIndex, const cStationGui_TrackSelectorAppSettings &in aSettings)
{		
	bool bSelected = false;
	
	if (aPanel.mButtonType == eStationGui_TrackSelectorAppButtonType_Button)
	{
		bSelected = Button_IsSwitchedOn(aPanel.mvPanels[0]);
	}
	else
	{
		bSelected = MovingButton_IsSwitchedOn(aPanel.mvPanels[0]);
	}

	tString sDoorStatus = "Selected";
	if (!bSelected)
	{
		sDoorStatus = "Unselected";
	}
	
	bool bSelectAllowed = ImGui_GetStateInt("SelectedTrackCount", 0) <= 1;
	
	///////////////////////////
	// Draw invisible button
	ImGui_SetModUISizeHoriExpansion(aPanel.mvUIPosExpandNeg.x, aPanel.mvUIPosExpandPos.x);
	ImGui_SetModUISizeVertExpansion(aPanel.mvUIPosExpandNeg.y, aPanel.mvUIPosExpandPos.y);
	cImGuiButtonData button = ImGui_GetDefaultButton();
	button.mbUseFrame = false;
	bool bButtonPressed = ImGui_DoButtonExt(aPanel.msName+"_TrackSelectorButton", "", button, 
											ImGui_NrmPosGroup(aPanel.mvNrmPos), ImGui_NrmSizeGroup(aPanel.mvNrmSize));
	ImGui_SetModUISizeHoriExpansion(0, 0);
	ImGui_SetModUISizeVertExpansion(0, 0);
											
	///////////////////////////
	// Draw map room image
	if (ImGui_PrevInFocus())
	{
		cColor col = button.mColorInFocus;
		if(bSelected) col = col * cColor(1.5,0.6f,0.6f, 1.0f);
		
		ImGui_SetModColorMul(col);
		ImGui_SetStateInt("TrackSelectorApp_FocusIndex", aIndex);
	}
	else
	{
		cColor col = button.mColorBase;
		//if(bDisabled) col = cColor(0.4, 1.0f);
		if(bSelected==false) col = button.mColorTriggered;
		
		ImGui_SetModColorMul(col);
	}
	ImGui_DoImage(aPanel.mGfx, ImGui_NrmPosGroup(0.5, 0.5, 2), ImGui_GetRatioCorrectSizeByRect(aPanel.mGfx, ImGui_NrmSizeGroup(1, 1)));
	ImGui_SetModColorMul(cColor_White);
	
	ImGui_SetModUseInput(true);
	if (bButtonPressed)
	{
		//ImGui_StopTimer("StopLimitAlert");
		
		//bool bLockDoor = !bSelected;
		bool bSelectPanel = !bSelected;
		if (aPanel.msCustomClickCallback != "")
		{
			bSelectPanel = bSelected;
			if (cLux_GetCurrentMap().ScriptPrepare("bool " + aPanel.msCustomClickCallback + "()") )
			{				
				cLux_GetCurrentMap().ScriptExecute();
				
				bSelected = cLux_GetCurrentMap().GetReturnBool();
			}
		}
/*		else if (bSelectPanel)
		{
			Depth_Audio_Terminal_Negative(ImGui_GetName()); // locked
		}
		else if (bUnlockAllowed==false)
		{
			Depth_Audio_Terminal_Negative(ImGui_GetName()); // locked
			ImGui_SetStateBool("LimitAlertActive", true);
			ImGui_AddTimer("StopLimitAlert", 2);
		}
		else
		{
			 Depth_Audio_Terminal_Confirm(ImGui_GetName()); // not locked
		}*/
		
		//if (bSelectPanel)
		//{
			for (uint i = 0; i < aPanel.mvPanels.length(); i++)
			{
				if (aPanel.mButtonType == eStationGui_TrackSelectorAppButtonType_Button)
				{
					if (bSelectPanel)
					{
						Button_SetSwitchedOn(aPanel.mvPanels[i], false, false);
						Depth_Audio_Terminal_Negative(ImGui_GetName());
					}
						
					else
					{
						Button_SetSwitchedOn(aPanel.mvPanels[i], true, true);
						Depth_Audio_Terminal_Confirm(ImGui_GetName());
					}
						

					//Button_SetLocked(aPanel.mvPanels[i], bLockDoor);
				}
				else
				{
					if (bSelectPanel)
						MovingButton_SetSwitchedOn(aPanel.mvPanels[i], false, false);
					else
						MovingButton_SetSwitchedOn(aPanel.mvPanels[i], true, true);
						
					//MovingButton_SetLocked(aPanel.mvPanels[i], bLockDoor);
				}
			}
			
		//}
	}
	return bSelected;
}
	
//-------------------------------------------------------

void StationGui_TrackSelectorApp_AddPanel(const cTrackSelectorAppButton &in aPanel)
{
	gvTrackControlPanels.push_back(aPanel);
}

//} END STATION DOOR LOCK APP